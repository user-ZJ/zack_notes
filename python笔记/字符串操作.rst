python字符串操作
===========================
1. 字符替换  

.. code-block:: python

	ttt.replace('.json', '.txt')
	
	
2. 删除括号及括号内的内容 

.. code-block:: python

	ss = "hello(xxx)" 
	print(re.sub('\\(.*?\\)','',ss))

	
3. 字符串和list互转

.. code-block:: python

    # list转字符串
    ''.join(list)
    # 字符串转list
    print list('12345')
    print list(map(int, '12345'))
    str2 = "123 sjhid dhi"
    list2 = str2.split()
    str3 = "www.google.com"
    list3 = str3.split(".") 


4. 删除换行符

.. code-block:: python

    f.readline().strip('\n')  #strip() 方法用于移除字符串头尾指定的字符（默认为空格）
    

5. 所有标点符号  

.. code-block:: python

    strip(string.punctuation)
    

6. 删除字符串中所有数字

.. code-block:: python

    #方法1：translate方法使用字典，将字符串中的字符转换为其他字符
    s = 'abc123def456ghi789zero0'
    remove_digits = str.maketrans('', '', string.digits)
    res = s.translate(remove_digits)

    #方法2
    filter(lambda x: x.isalpha(), "a1a2a3s3d4f5fg6h")
                
    #方法3		
    for i in range(10):
        a.replace(str(i),'')

7. 字符串转数字

.. code-block:: python

    int(str)
    float(str)

8. 格式化字符串

.. code-block:: python

    #str.format()
    #	基本语法是通过 {} 和 : 来代替以前的 %
    #	"{} {}".format("hello", "world")    # 不设置指定位置，按默认顺序
    #	"{0} {1}".format("hello", "world")  # 设置指定位置
    #	"{1} {0} {1}".format("hello", "world")  # 设置指定位置
    #	{:.2f}  保留小数点后两位
    #	{:+.2f} 带符号保留小数点后两位
    #	{:.0f}  不带小数
    #	{:0>2d}  数字补零 (填充左边, 宽度为2),如5输出为05
    #	{:x<4d}  数字补x (填充右边, 宽度为4) ，如5输出5xxx
    #	{:,}  以逗号分隔的数字格式
    #	{:.2%}  百分比格式,0.25->25.00%
    #	{:.2e}  指数记法
    #	{:>10d}  右对齐 (默认, 宽度为10)
    #	{:<10d}  左对齐 (宽度为10)
    #	{:^10d}  中间对齐 (宽度为10)
    #	二进制-16进制表示
    #	'{:b}'.format(11)  1011
    #	'{:d}'.format(11)  11
    #	'{:o}'.format(11)  13
    #	'{:x}'.format(11)  b
    #	'{:#x}'.format(11)  0xb
    #	'{:#X}'.format(11)  0xB
        
    #f-string Python3.6新引入的一种字符串格式化方法
    name = 'Eric'
    print(f'Hello, my name is {name}')
    #'Hello, my name is Eric'
    

9. 将list以指定分隔符转化为字符串

.. code-block:: python

    ttt = ["1","2","3"]
    print(",".join(ttt))
    #out：1,2,3  


10. print中文字符报错

'ascii' codec can't encode characters in position 97-98: ordinal not in range(128)
在print一个中文字符串时候有时候也会报ascii的编码错误，这时候需要注意查看一下标准输出的默认字符编码是否不是utf-8 (一般所有的python环境标准输出的字符编码都是默认的utf-8，我在使用docker基于ubuntu16版本装的python35遇到这种问题了)  
通过  sys.stdout.encoding  查看标准输出的默认字符编码
修改默认编码：

.. code-block:: python

    import sys
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())

11. 判断字符串以XX开头或结尾

.. code-block:: python

    value.endswith('.sh')
    value.startswith('00')
    

    