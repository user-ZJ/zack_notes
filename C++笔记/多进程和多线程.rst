多进程和多线程
================================

:ref:`多进程`

:ref:`多线程`

多线程和多进程区别
-------------------------------
1. 进程是操作系统分配资源的最小单元, 线程是操作系统调度的最小单元。(一个是供分配， 一个是供调度)
2. 一个应用程序至少包括1个进程，而1个进程包括1个或多个线程，线程的尺度更小。
3. 每个进程在执行过程中拥有独立的内存单元，而一个进程的多个线程在执行过程中共享内存。


举个例子：

1. 一座工厂（类似CPU），假设电力有限，只能供一个车间，即只能运行一个任务，里面有许多的车间（类似进程），执行单个的任务，这时，就是每次只能单个车间运行，若是另一个车间想工作，则当前车间得休息。
2. 而多核CPU，就像多个工厂，它可以同时让多个车间（类似多个进程）一起工作，当然，是工作在不同工厂里，也就是运行在不同CPU核上。
3. 而每个车间里有很多的工人，这就类似是线程，一个车间可以有多个工人，也就是一个进程可有多个线程。



多线程和多线程在实际项目中如何取舍
---------------------------------------------
考察点：

1. **理论知识：** 对多线程和多进程的理解，能解释其优点和缺点
2. **实际经验：** 展示过去在真实项目中如何应用这些概念，以及遇到的挑战和如何解决的。
3. **决策能力：** 展示如何在特定情况下进行决策，比如何时选择多线程，何时选择多进程，并能对此进行合理的解释。
4. **性能考虑：** 了解和能够解释多线程和多进程如何影响应用的性能，如内存使用、CPU使用、上下文切换的开销等。

回答角度:

1. **资源使用:** 讨论多线程和多进程对系统资源（如CPU，内存，IO）的使用情况，并考虑在你的特定应用中哪种方式更有效。
2. **并发性:** 评估你的应用是否需要高并发，以及并发的粒度。大量的小任务可能更适合多线程，而独立且消耗资源较大的任务可能更适合多进程。
3. **数据共享与通信:** 考虑你的应用中的数据共享需求。多线程更容易共享数据，而多进程需要复杂的IPC机制。
4. **错误处理和恢复:** 如果你的应用的一个部分失败，应如何处理？多进程的隔离性可能会帮助错误恢复，而多线程可能需要更复杂的错误处理策略。
5. **程序的结构和维护:** 多线程可能需要更复杂的同步和互斥机制，这可能使得代码更难编写和维护。考虑在你的应用中这是否会成为问题。
6. **开销与性能:** 多线程的上下文切换开销小于多进程，但过多的线程也会导致调度开销增加。权衡这两者以达到最佳性能。

简短回复
```````````
多进程和多线程的选择取决于任务的需求和特点。如果任务需要更多的数据隔离和安全性，
多进程可能是更好的选择，因为进程拥有独立的内存空间。如果任务需要大量的数据共享和高效的任务切换，
那么多线程可能更加适合，因为线程间的上下文切换比进程要快且共享同一进程的内存空间。

详细回复
`````````````
| **多进程：**
| 缺点：多进程进行任务切换时，由于每个进程地址空间独立，会不停地刷新高速缓存器和tlb列表页，所以比较浪费CPU资源
| 优点：多个进程都有自己的独立地址空间，一个进程结束不会影响其他进程。

| **多线程：**
| 同一个进程中创建多个线程，共享同一个进程的地址空间
| 优点：1、任务切换效率高；2、避免额外tlb和cache的刷新；3、同一进程的多线程共享全局变量，多线程之间数据传递比较容易。
| 缺点：同一进程中某一多线程结束时，其他线程也要立即结束。

当我们在选择使用多进程还是多线程时，需要考虑以下几个因素：

1. **数据共享和通信：** 线程之间可以轻易地共享数据，它们位于同一进程空间，可以直接访问彼此的堆和全局变量。
   另一方面，进程拥有各自独立的内存空间，所以它们之间的通信（如IPC，包括管道、消息队列、信号量等）需要更多的开销。
2. **安全性和隔离性：** 因为进程有独立的内存空间，所以一个进程崩溃并不会直接影响到其他进程。
   但在多线程的情况下，一个线程的崩溃可能会影响到位于同一进程中的其他线程。
3. **资源使用：** 多进程需要的资源（包括内存、文件句柄等）通常会比多线程更多。
   这是因为每个进程都需要有自己的独立执行环境（包括代码、系统变量、环境变量等）。然而，多线程只需要共享一些这样的资源。
4. **切换开销：** 线程切换的开销小于进程切换的开销。线程切换仅涉及寄存器、程序计数器、栈指针等的存储和恢复，
   而进程切换还需要更换内存映射、刷新TLB等。
5. **编程和调试复杂性：** 多线程程序通常比多进程程序更复杂，需要更多的同步和互斥机制来避免条件竞争和死锁。
   进程因为拥有独立的内存空间，编程和调试通常更简单些。

综上，如果你的应用需要大量的并发数据处理并且要求低延迟，或者需要大量共享数据，那么多线程可能是更好的选择。
然而，如果你更关心隔离性，或者你的应用更适合模块化，每个模块都在自己的进程中运行，那么多进程可能是更好的选择。
此外，还需要考虑你的应用是运行在何种硬件和操作系统环境下，不同的环境可能会对多进程或多线程的效率有所影响。

.. note:: 

    计算密集型使用多线程，IO密集型使用多线程?


https://zhuanlan.zhihu.com/p/350939400