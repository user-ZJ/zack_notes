.. _模板编程:

模板编程
===============

语法
----------

::

	/**
	* template -- 声明创建模板
	* typename -- 表面其后面的符号是一种数据类型，可以用class代替
	* T -- 通用的数据类型，名称可以替换，通常为大写字母
	**/
	template<typename T> 或 
	template<class T>



模板特化/偏特化
-------------------
* 模板类型的特化指的是允许模板类型定义者为模板根据实参的不同而定义不同实现的能力
* 特化版本可以和一般版本拥有不同的外部接口和实现
* 模板偏特化：也可以对部分模板参数进行特化定义，称为偏特化
* 模板特化支持模板类、模板函数

.. literalinclude:: code/5_template_special.cpp
	:language: cpp


.. literalinclude:: code/6_template_special_part.cpp
	:language: cpp



模板默认值
-----------------------
.. code-block:: cpp

	#include <iostream>
	#include <string>

	template<typename T = int, typename U = std::string>
	class MyClass {
	public:
		MyClass(T t = 0, U u = "") : m_t(t), m_u(u) {}
		void print() const {
			std::cout << "t: " << m_t << ", u: " << m_u << std::endl;
		}
	private:
		T m_t;
		U m_u;
	};

	template<typename T = int, typename U = std::string>
	void print(T t = 0, U u = "") {
		std::cout << "t: " << t << ", u: " << u << std::endl;
	}

	int main() {
		MyClass<> obj1(42, "hello");
		obj1.print();
		MyClass<double> obj2(3.14, "world");
		obj2.print();
		MyClass<char, const char*> obj3('x', "foo");
		obj3.print();

		print(); // 使用默认值
		print(42); // 指定 T = int，使用默认值 U = std::string
		print("hello"); // 指定 U = std::string，使用默认值 T = int
		print(3.14, "world"); // 指定 T = double, U = std::string
		
		return 0;
	}


函数模板
-------------

函数模板示例
```````````````````

.. code-block:: cpp

	#include<iostream>
	using namespace std;

	//两个整型交换
	void swapInt(int& a, int& b)
	{
		int temp = a;
		a = b;
		b = temp;
	}

	//交换两个浮点数据
	void swapDouble(double& a, double& b)
	{
		double temp = a;
		a = b;
		b = temp;
	}

	//利用模板实现交换函数
	template<typename T>//声明一个模板 告诉编译器后面代码中紧跟着的T不要报错，T是一个通用数据类型
	void mySwap(T& a, T& b)
	{
		T temp = a;
		a = b;
		b = temp;
	}

	void test01()
	{
		int a = 10;
		int b = 20;
		//swapInt(a, b);
		/*利用模板交换
		* 两种方式使用函数模板
		* 1、自动类型推导
		*/
		//mySwap(a, b);
		cout << "a = " << a << endl;//20
		cout << "b = " << b << endl;//10
		//2、显示指定类型
		mySwap<int>(a, b);
		cout << "a = " << a << endl;
		cout << "b = " << b << endl;

		double c = 1.1;
		double d = 2.2;
		//swapDouble(c, d);
		mySwap<double>(c, d);
		cout << "c = " << c << endl;//2.2
		cout << "d = " << d << endl;//1.1
	}

	int main()
	{
		test01();
		system("pause");
		return 0;
	}


函数模板注意事项
`````````````````````

1. 自动类型推导，必须推导出一致的数据类型 T，才可以使用
2. 模板必须要确定出 T 的数据类型，才可以使用
3. 函数模板可以应需要自动扩展，随着每种类型的扩展，都会生成附加代码，被称为 **代码膨胀**
4. 如果有一个非模板和一个模板都可以匹配的话，那么非模板具有优先权

.. code-block:: cpp

	#include<iostream>
	using namespace std;
	//利用模板实现通用的交换函数
	template<typename T>
	void mySwap(T& a, T& b)
	{
		T temp = a;
		a = b;
		b = temp;
	}
	//1、自动类型推导，必须推导出一致的数据类型 T，才可以使用
	void test01()
	{
		int a = 10;
		int b = 20;
		char c = 'c';
		
		mySwap(a, b);//正确，可以推导出一致的 T
		//mySwap(a, c);错误，没有与参数类型一致的 函数类型 T(推导不出一致的T类型)
	}

	//2、模板必须要确定出 T 的数据类型，才可以使用
	template<class T>
	void func()
	{
		cout << "func 调用" << endl;
	}
	void test02()
	{
		//func();错误，模板不能独立使用，必须确定出T的类型
		func<int>();//利用显示指定类型的方式 给T一个类型 才可以使用该模板
	}

	int main()
	{
		test01();
		test02();
		system("pause");
		return 0;
	}


普通函数与函数模板区别
```````````````````````````

1. 普通函数调用时可以发生自动类型转换（隐式类型转换）
2. 函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换
3. 如果利用显示指定类型的方式，可以发生隐式类型转换

.. code-block:: cpp

	#include<iostream>
	using namespace std;
	//普通函数
	int myAdd01(int a, int b)
	{
		return a + b;
	}

	//函数模板
	template<class T>
	int myAdd02(T a, T b)
	{
		return a + b;
	}

	void test01()
	{
		int a = 10;
		int b = 20;
		char c = 'c';

		cout << myAdd01(a, b) << endl;//30
		cout << myAdd01(a, c) << endl;//109=10+99  a - 97  c - 99 自动类型转换

		//自动类型推导
		myAdd02(a, b);
		cout << myAdd02(a, b) << endl;//30
		//myAdd02(a, c);报错，自动类型推倒时，不会发生隐式类型转换
		myAdd02<int>(a, c);//正确，显示指定类型，可以发生隐式类型转换
	}

	int main()
	{
		test01();
		system("pause");
		return 0;
		//总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型 T
	}


普通函数与函数模板的调用规则
```````````````````````````````

1. 如果函数模板和普通函数都可以实现，优先调用 普通函数（编译器有关）
2. 可以通过 空模板参数列表 来强制调用函数模板
3. 函数模板也可以发生 函数重载
4. 如果函数模板可以产生更好的匹配 优先调用 函数模板

.. code-block:: cpp

	#include<iostream>
	using namespace std;
	void myprint(int a, int b)
	{
		cout << "调用的是普通函数！" << endl;
	}

	template<class T>
	void myPrint(T a, T b)
	{
		cout << "调用函数模板！" << endl;
	}  

	template<class T>
	void myPrint(T a, T b, T c)
	{
		cout << "函数模板重载！" << endl;
	}

	void test01()
	{
		int a = 10;
		int b = 20;
		//myPrint(a, b);//1、优先调用函数模板

		//2、通过空模板参数列表 强制调用函数模板
		myPrint<>(a, b);//函数模板

		//3、函数模板 重载
		int c = 30;
		myPrint<>(a, b, c);//函数模板重载
		myPrint(a, b, c);//函数模板重载

		//4、如果函数模板可以产生更好的匹配 优先调用 函数模板
		char c1 = 'a';
		char c2 = 'b';
		myPrint(c1, c2);//调用函数模板
	}
	int main()
	{
		test01();
		system("pause");
		return 0;
		//总结：既然提供了函数模板，最好不要提供普通函数，否则容易出现二义性
	}


函数模板局限性
`````````````````

模板的通用性不是万能的 有些特定数据类型 需要用具体化方式做特殊实现

.. code-block:: cpp

	#include<iostream>
	using namespace std;
	class Person
	{
	public:

		Person(string name, int age)
		{
			this->m_Name = name;
			this->m_Age = age;
		}

		string m_Name;//姓名
		int m_Age;//年龄
	};

	//对比两个数据是否相等函数
	template<class T>
	bool myCompare(T& a, T& b)
	{
		if (a == b)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	//利用具体化的Person版本实现代码，具体化会优先调用
	template<> bool myCompare(Person& p1, Person& p2)
	{
		if (p1.m_Name == p2.m_Name && p1.m_Age == p2.m_Age)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	void test01()
	{
		int a = 10;
		int b = 20;
		bool ret = myCompare(a, b);
		if (ret)
		{
			cout << "a == b" << endl;
		}
		else
		{
			cout << "a != b" << endl;
		}
	}

	void test02()
	{
		Person p1("Tom", 10);
		Person p2("Tom", 12);

		bool ret = myCompare(p1, p2);
		if (ret)
		{
			cout << "p1 == p2" << endl;//p1==p2
		}
		else
		{
			cout << "p1 != p2" << endl;
		}
	}
	int main()
	{
		//test01();
		test02();
		system("pause");
		return 0;
		/*总结：
		1、利用具体化的模板，可以解决自定义类型的通用化
		2、学习模板不是为了写模板，而是在STL中能够运用系统提供的模板*/
	}


函数模板具现化
`````````````````

可以让模板函数在源文件中实现，而不用放在头文件中实现。

.. code-block:: cpp

	template<typename T>
	void foo(const T& x){
	}

	template<typename T>
	T bar(const T& x){
		return x;
	}

	template void foo(const int&);
	template void foo(const double&);
	template char bar(const char&);




类模板
------------------

建立一个通用类，类中的成员 数据类型 可以不具体指定，用一个 虚拟的类型 来代表 

类模板示例
`````````````````


.. code-block:: cpp

	#include<iostream>
	using namespace std;
	template<class NameType,class AgeType>
	class Person
	{
	public:
		Person(NameType name, AgeType age)
		{
			this->m_Name = name;
			this->m_Age = age;
		}

		void showPerson()
		{
			cout << "name = " << this->m_Name << endl;
			cout << "age = " << this->m_Age << endl;
		}

	public:
		NameType m_Name;
		AgeType m_Age;
	};

	void test01()
	{
		//指定NameType 为 string 类型，AgeType 为 int 类型
		Person<string, int> p1("孙悟空", 99);
		p1.showPerson();
	}

	int main()
	{
		test01();
		system("pause");
		return 0;
		//总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板
	}


类模板和函数模板区别
`````````````````````
1. 类模板没有自动类型推导的使用方式
2. 类模板在模板参数列表中可以有默认参数

.. code-block:: cpp

	#include<iostream>
	using namespace std;

	template<class NameType,class AgeType>//模板参数列表
	//template<class NameType, class AgeType = int> //模板参数列表中可以有默认参数
	class Person
	{
	public:
		Person(NameType name, AgeType age)
		{
			this->m_Name = name;
			this->m_Age = age;
		}

		void showPerson()
		{
			cout << "name = " << this->m_Name << endl;
			cout << "age = " << this->m_Age << endl;
		}

	public:
		NameType m_Name;
		AgeType m_Age;
	};

	//1、类模板没有自动类型推导的使用方式
	void test01()
	{
		//Person p("孙悟空", 999);自动类型推导失败，类模板中，无法使用自动类型推导
		Person<string, int>p("孙悟空", 999);//类模板中只能显示指定类型
		p.showPerson();
	}

	//2、类模板在模板参数列表中可以有默认参数
	void test02()
	{
		//Person<string>p1("猪八戒", 888);参数列表中可以有默认参数 class AgeType = int
		//p1.showPerson();
	}
	int main()
	{
		test01();
		test02();
		system("pause");
		return 0;
	}

模板类成员
```````````````````
* 普通成员：使用与主模板相同类型模板参数

	- 数据成员(变量、常量)
	- 成员函数
	- 静态成员(数据或函数)
	- 成员类型别名
	- 成员类型

* 成员模板(使用与主模板不同的类型参数)

	- 成员模板不能定义虚函数(模板实例化会导致链接器不断为虚表增加虚函数增项)

* 所有普通类的成员规则同样适用于模板类成员

类模板实例化机制
`````````````````````````````
* 数据成员--只要类型被使用，编译器会根据其数据成员，生成对应类型结构
* 函数成员--选择性实例化

	- 非虚函数，如果实际调用到，则会生成代码；如果没有调用到，则不生成
	- 虚函数，无论是否调用，总会生成代码。因为在运行时有可能调用到

* 强制实例化模板--使用template class Array<int>;来强制要求编译所有模板类成员函数，抛出所有编译错误，无论是否调用到

.. code-block:: cpp

	#include<iostream>
	using namespace std;

	class Person1
	{
	public:
		void showPerson1()
		{
			cout << "Person1 show!" << endl;
		}
	};

	class Person2
	{
	public:
		void showPerson2()
		{
			cout << "Person2 show!" << endl;
		}
	};

	template<class T>
	class MyClass 
	{
	public:
		T obj;//编译成功 类模板中的成员函数 在调用时才创建
		//类模板中的成员函数
		void func1()
		{
			obj.showPerson1();
		}

		void func2()
		{
			obj.showPerson2();
		}
	};

	void test01()
	{
		MyClass<Person1>m;
		m.func1();//Person1 show!
		//m.func2();//showPerson2不是Person1的成员函数，编译出错
	}

	int main()
	{
		test01();
		system("pause");
		return 0;
		//总结：类模板中的成员函数 不是 一开始就可以创建 而是在调用时才创建
	}


类模板对象做函数参数
`````````````````````````

1. 指定传入的类型：直接显示对象的数据类型（常用）
2. 参数模板化：将对象中的参数变为模板进行传递
3. 整个类模板化：将这个对象类型 模板化进行传递

.. code-block:: cpp

	#include<iostream>
	using namespace std;
	template<class T1,class T2>
	class Person
	{
	public:

		Person(T1 name,T2 age)
		{
			this->m_Name = name;
			this->m_Age = age;
		}

		void showPerson()
		{
			cout << "姓名：" << this->m_Name << "\t年龄：" << this->m_Age << endl;
		}

		T1 m_Name;
		T2 m_Age;
	};
	//1、指定传入类型
	void printPerson1(Person<string, int>& p)
	{
		p.showPerson();
	}
	void test01()
	{
		Person<string, int>p1("孙悟空", 100);
		printPerson1(p1);
	}

	//2、参数模板化
	template<class T1,class T2>
	void printPerson2(Person<T1, T2>& p)
	{
		p.showPerson();
		cout << "T1 的类型：" << typeid(T1).name() << endl;//string
		cout << "T2 的类型：" << typeid(T2).name() << endl;//int
	}
	void test02()
	{
		Person<string, int>p1("猪八戒", 99);
		printPerson2(p1);
	}

	//将整个类模板化
	template<class T>
	void printPerson3(T& p)
	{
		p.showPerson();
		cout << "T 的类型：" << typeid(T).name() << endl;//Person
	}
	void test03()
	{
		Person<string,int>p("唐僧", 30);
		printPerson3(p);
	}

	int main()
	{
		test01();
		test02();
		test03();
		system("pause");
		return 0;
		/*总结：
		* 1、通过类模板创建的对象，可以有参展方式向函数中进行传参
		* 2、使用广泛的是第一种：指定传入类型 void printPerson1(Person<string, int>& p)
		*/
	}


类模板与继承
`````````````````

1. 当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类T的类型
2. 如果不指定，编译器无法给子类分配内存
3. 如果想灵活指定出父类中 T 的类型，子类也需要变为类模板

.. code-block:: cpp

	#include<iostream>
	using namespace std;

	template<class T>
	class Base
	{
	public:
		T m;
	};

	//class Son :public Base//缺少类模板Base的参数列表,必须知道父类中 T的数据类型，才能继承给子类再分配内存空间
	class Son:public Base<int>//必须指定一个类型
	{};
	void test01()
	{
		Son s1;
	}

	//如果想灵活指定出父类中 T 的类型，子类也需要变为类模板
	template<class T1,class T2>
	class Son2 :public Base<T1>
	{
	public:
		Son2()
		{
			cout << "T1 的数据类型：" << typeid(T1).name() << endl;//int
			cout << "T2 的数据类型：" << typeid(T2).name() << endl;//char
		}
		T1 obj;
	};
	void test02()
	{
		Son2<int,char> s2;//子类创建时，指定类型传递给父类
	}

	int main()
	{
		test01();
		test02();
		system("pause");
		return 0;
		//总结：如果父类是类模板，子类需要指定出父类中 T 的数据类型
	}


类模板成员函数的类外实现
```````````````````````````

.. code-block:: cpp

	#include<iostream>
	using namespace std;
	/*类模板成员函数的类外实现
	*/
	template<class T1,class T2>
	class Person
	{
	public:
		Person(T1 name, T2 age);//构造函数 类内声明

		void showPerson();//成员函数 类内声明

		T1 m_Name;
		T2 m_Age;
	};
	//构造函数 类外实现
	template<class T1,class T2>
	Person<T1, T2>::Person(T1 name, T2 age)
	{
			this->m_Name = name;
			this->m_Age = age;
	}
	//成员函数 类外实现
	template<class T1, class T2>
	void Person<T1,T2>::showPerson()//<T1,T2>写在 :: 前面
	{
			cout << "姓名：" << this->m_Name << "\t年龄：" << this->m_Age << endl;
	}
	void test01()
	{
		Person<string,int> p("Tom", 18);
		p.showPerson();
	}

	int main()
	{
		test01();
		system("pause");
		return 0;
		//总结：类模板中的成员函数类外实现，需要加上模板参数列表
	}


类模板分文件编写
```````````````````````

类模板中成员函数创建时机是在 调用阶段，导致分文件编写时链接不到

**解决办法：1、直接包含.cpp源文件**

.. code-block:: cpp

	// Person.h
	#pragma once
	#include<iostream>
	using namespace std;

	template<class T1, class T2>
	class Person
	{
	public:
		Person(T1 name, T2 age);

		void showPerson();

		T1 m_Name;
		T2 m_Age;
	};


.. code-block:: cpp

	// Person.cpp
	#include<iostream>
	#include"Person.h"
	using namespace std;

	template<class T1, class T2>
	Person<T1, T2>::Person(T1 name, T2 age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	template<class T1, class T2>
	void Person<T1, T2>::showPerson()
	{
		cout << "姓名：" << this->m_Name << "\t年龄：" << this->m_Age << endl;
	}


.. code-block:: cpp

	#include<iostream>
	using namespace std;
	#include"Person.cpp"
	int main()
	{
		Person<string, int>p("Jerry", 21);
		p.showPerson();
		system("pause");
		return 0;
	}


**解决办法：2、将声明.h和实现.cpp写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并非强制**

.. code-block:: cpp

	#pragma once
	#include<iostream>
	using namespace std;

	template<class T1, class T2>
	class Person
	{
	public:
		Person(T1 name, T2 age);

		void showPerson();

		T1 m_Name;
		T2 m_Age;
	};

	template<class T1, class T2>
	Person<T1, T2>::Person(T1 name, T2 age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	template<class T1, class T2>
	void Person<T1, T2>::showPerson()
	{
		cout << "姓名：" << this->m_Name << "\t年龄：" << this->m_Age << endl;
	}


.. code-block:: cpp

	void test01()
	{
		Person<string, int>p("Jerry", 21);
		p.showPerson();
	}

	int main()
	{
		test01();
		system("pause");
		return 0;
		//总结：主流方法第二种，将类模板成员函数写到一起，并将后缀名改为.hpp
	}


**解决办法：3、模板具现化，前提是你知道模板会有哪些具现化类型，并事先显示（或隐式）具现化出来**

.. code-block:: cpp

	#pragma once
	#include<iostream>
	using namespace std;

	template<class T1, class T2>
	class Person
	{
	public:
		Person(T1 name, T2 age);

		void showPerson();

		T1 m_Name;
		T2 m_Age;
	};

	template<string,int> 

	template<class T1, class T2>
	Person<T1, T2>::Person(T1 name, T2 age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	template<class T1, class T2>
	void Person<T1, T2>::showPerson()
	{
		cout << "姓名：" << this->m_Name << "\t年龄：" << this->m_Age << endl;
	}


类模板中模板成员函数
`````````````````````````````````
.. code-block:: cpp

	// MyTemplateClass.hpp
	template<typename T>
	class MyTemplateClass {
	public:
	void nonTemplateFunction(); // 非模板函数声明
	template<typename U>
	void templateFunction(); // 模板函数声明
	};

	#include "MyTemplateClass.tpp" // 引入模板成员函数的定义

	// MyTemplateClass.tpp
	template<typename T>
	template<typename U>
	void MyTemplateClass<T>::templateFunction() {
	// 模板函数实现
	}



类模板与友元
```````````````````

类模板与友元 掌握类模板配合友元函数的类内和类外实现

* 全局函数类内实现 - 直接在类内声明友元即可
* 全局函数类外实现 - 需要提前让编译器知道全局函数的存在

.. code-block:: cpp

	#include<iostream>
	using namespace std;

	//提前让编译器知道Person类存在
	template<class T1,class T2> class Person;

	//2、全局函数类内声明 类外实现
	template<class T1, class T2>
	void printPerson1(Person<T1, T2> p)
	{
		cout << "姓名：" << p.m_Name << "\t年龄" << p.m_Age << endl;
	}

	//通过全局函数，打印Person信息
	template<class T1,class T2>
	class Person
	{
		//全局函数配合友元 类内实现
		friend void printPerson(Person<T1,T2> p)
		{
			cout << "姓名：" << p.m_Name << "\t年龄" << p.m_Age << endl;
		}

		//全局函数配合友元类内声明 类外实现
		//加 空模板 参数列表
		//如果是全局函数 类外实现 需要让编译器提前知道这个函数的存在
		friend void printPerson1<>(Person<T1, T2> p);

	public:
		Person(T1 name, T2 age)
		{
			this->m_Name = name;
			this->m_Age = age;
		}

	private:
		T1 m_Name;
		T2 m_Age;
	};

	//1、全局函数在类内实现
	void test01()
	{
		Person<string, int>p("Jerry", 22);
		printPerson(p);
	}
	//2、全局函数在类外实现
	void test02()
	{
		Person<string, int>p("Jerry", 23);
		printPerson1(p);
	}

	int main()
	{
		test01();
		test02();
		system("pause");
		return 0;
		//总结：建议全局函数做类内实现，用法简单，编译器可以直接识别
	}


变参模板
-------------------------
变参模板（Variadic Template）是C++11引入的一种特殊的函数模板，允许函数接受任意数量和类型的参数。
变参模板的原理是利用递归展开（Recursion Unfolding）的思想，将函数模板的参数依次拆分成一个个单独的参数，
然后递归处理每个参数，直到处理完所有参数为止。

变参模板参数展开
`````````````````````````
变参模板参数展开（variadic template parameter expansion）可以通过以下几种形式来实现：

1. 递归展开：可以使用递归函数或递归类来展开变参模板参数。在每次递归调用时，都可以处理一个变参，并将其从参数包中移除，直到参数包为空为止。

.. code-block:: cpp

	void printArgs() {}

	template <typename T, typename... Args>
	void printArgs(T t, Args... args) {
		std::cout << t << " ";
		printArgs(args...);
	}

2. 展开成参数列表：可以使用展开操作符（...）将参数包展开成参数列表，从而在函数或类模板的参数列表中使用。

.. code-block:: cpp

	template <typename... Args>
	auto sum(Args... args) {
		return (args + ...);
	}

3. 展开成初始化列表：可以使用展开操作符（...）将参数包展开成初始化列表，从而在初始化数组、结构体或类的成员时使用。

.. code-block:: cpp

	template <typename... Args>
	auto makeArray(Args... args) {
		return std::array{args...};
	}

.. literalinclude:: code/VariadicTemplate1.cpp
	:language: cpp

.. literalinclude:: code/VariadicTemplate1_2.cpp
	:language: cpp

.. literalinclude:: code/VariadicTemplate1_3.cpp
	:language: cpp




概念(Concept)
------------------
概念为泛型编程定义了"显式约束"的接口合同，实现编译时多态，也称静态多态

概念的主要特点
`````````````````````
* C++概念是一种显式的类型接口合同，在编译时执行类型约束检查
* 概念的本质是一组对类型参数T的编译时谓词，表达式求值true或false
* 概念仅仅是约束，不是代码，没有类型、存储、生命周期、地址...
* 概念可以帮助更好的理解泛型组件之间的合约；易维护，易沟通，更友好的出错信息
* 有概念约束的版本，可以参与重载辨析，相对于通用版本是一个特化版(更优先辨析)
* 概念是比Traits,编译时if表达式更加强大的抽象

概念定义
```````````````````
.. literalinclude:: code/7_concept_basic5.cpp
	:language: cpp

* 参数T不可以有额外约束，不能本身再是概念(用概念来定义概念)
* 不可以在函数内定义概念

概念意义
````````````````````````````
模板参数约束是指使用概念（Concepts）来限制模板参数的类型和行为。
在C++17之前，程序员只能通过特化和SFINAE（Substitution Failure Is Not An Error）等技术来对模板参数进行约束。
这些技术在代码可读性和维护性方面存在一些问题。例如，代码的语义可能不够明确，特化的代码可能难以维护，等等。
概念的出现可以解决这些问题。

概念的意义在于，它可以让程序员在定义模板时添加约束条件，从而限制模板参数的类型和行为。
这样可以减少模板实例化时的错误，并使代码更加清晰和可读。例如，如果定义了一个函数模板，
只能接受可迭代的容器作为参数，可以使用概念来限制模板参数的类型，从而避免传入其他类型的参数。

概念的常用类型和操作符
```````````````````````````````
概念支持多种常见的类型和操作符，这些类型和操作符在C++20中都有具体的实现。例如：

* 核心概念

+--------------------------+----------------------------------------------------------+----------------------------------+
|           概念           |                           说明                           |               使用               |
+==========================+==========================================================+==================================+
| same_as                  | 判断类型是否和另一个类型相同                             | std::same_as<T, U>               |
+--------------------------+----------------------------------------------------------+----------------------------------+
| derived_from             | 指定一个类型派生自另一个类型                             | std::derived_from<Derived, Base> |
+--------------------------+----------------------------------------------------------+----------------------------------+
| convertible_to           | 类型可转换为另一个类型                                   | convertible_to<From, To>         |
+--------------------------+----------------------------------------------------------+----------------------------------+
| common_reference_with    | 指定两个类型共享一个公共引用类型                         | common_reference_with<T,U>       |
+--------------------------+----------------------------------------------------------+----------------------------------+
| common_with              | 指定两个类型共享一个公共类型                             | common_with<T,U>                 |
+--------------------------+----------------------------------------------------------+----------------------------------+
| integral                 | 判断类型是否是整型                                       | integral<T>                      |
+--------------------------+----------------------------------------------------------+----------------------------------+
| signed_integral          | 判断类型是否是有符号整型                                 |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| unsigned_integral        | 判断类型是否是无符号整型                                 |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| floating_point           | 判断类型是否是浮点类型                                   |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| assignable_from          | 判断类型是否可以从另一个类型赋值                         | assignable_from<LHS, RHS>        |
+--------------------------+----------------------------------------------------------+----------------------------------+
| swappable/swappable_with | 判断类型是否可交换                                       | swappable<T>/swappable_with<T,U> |
+--------------------------+----------------------------------------------------------+----------------------------------+
| destructible             | 判断类型的对象是可销毁的                                 | destructible<T>                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| constructible_from       | 指定类型的变量可以从一组参数类型构造或绑定到一组参数类型 |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| default_initializable    | 指定类型有默认构造                                       |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| move_constructible       | 指定类型有移动构造                                       |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+
| copy_constructible       | 指定类型有拷贝构造                                       |                                  |
+--------------------------+----------------------------------------------------------+----------------------------------+


* 可比较的概念
  
+------------------------------------------------+----------------------------------+------+
|                      概念                      |               说明               | 使用 |
+================================================+==================================+======+
| boolean-testable                               | 指定可以在布尔上下文中使用的类型 |      |
+------------------------------------------------+----------------------------------+------+
| equality_comparable/equality_comparable_with   | 类型实现了==操作符               |      |
+------------------------------------------------+----------------------------------+------+
| totally_ordered/totally_ordered_with           | 指定类型上的比较运算符产生总顺序 |      |
+------------------------------------------------+----------------------------------+------+
| three_way_comparable/three_way_comparable_with | 类型实现了<=>操作符              |      |
+------------------------------------------------+----------------------------------+------+

* 对象概念

+-------------+----------------------------------------------+------+
|    概念     |                     说明                     | 使用 |
+=============+==============================================+======+
| movable     | 可移动和交换                                 |      |
+-------------+----------------------------------------------+------+
| copyable    | 可拷贝，移动，交换                           |      |
+-------------+----------------------------------------------+------+
| semiregular | 有拷贝，移动，交换和默认构造                 |      |
+-------------+----------------------------------------------+------+
| regular     | 有拷贝，移动，交换和默认构造，并实现==操作符 |      |
+-------------+----------------------------------------------+------+

* 可调用概念

+-----------------------------+----------------------------------------------+------+
|            概念             |                     说明                     | 使用 |
+=============================+==============================================+======+
| invocable/regular_invocable | 指定可以使用给定的一组参数类型调用可调用类型 |      |
+-----------------------------+----------------------------------------------+------+
| predicate                   | 指定可调用类型是布尔谓词                     |      |
+-----------------------------+----------------------------------------------+------+
| relation                    | 指定可调用类型是二元关系                     |      |
+-----------------------------+----------------------------------------------+------+
| equivalence_relation        | 指定等价关系                                 |      |
+-----------------------------+----------------------------------------------+------+
| strict_weak_order           | 指定关系强加了严格的弱排序                   |      |
+-----------------------------+----------------------------------------------+------+





* 可迭代的概念（Iterable）：表示类型T必须支持begin和end操作符，且返回值必须能够用于for-each循环。
* 可调用的概念（Invocable）：表示类型T必须是一个可调用的对象，例如函数指针、lambda表达式等。
* 可转换的概念（Convertible）：表示类型T必须能够隐式转换为另一个指定类型。
* 可比较的概念（Comparable）：表示类型T必须支持比较操作符，例如==和!=。
* 可Hash的概念（Hashable）：表示类型T必须支持hash函数。
* 可赋值的概念（Assignable）：表示类型T必须支持赋值操作符=。

概念的调试和错误处理
```````````````````````````
在使用概念时，可能会遇到一些调试和错误处理的问题。例如，当概念约束条件不满足时，编译器将抛出错误。如果这些错误信息不够清晰，可能会导致调试困难。

为了避免这些问题，可以使用一些调试和错误处理的技巧。例如，可以使用 **static_assert** 来添加自定义错误信息，以帮助调试和错误处理。
另外，可以使用诊断工具来检查代码中的概念错误，以提高代码质量和可读性。



函数模板-设计一个函数可以接收lambda,函数，函数对象作为参数
------------------------------------------------------------------------------
.. literalinclude:: code/template/func_templete1.cpp
	:language: cpp
	:linenos:



参考
-----------

https://zhuanlan.zhihu.com/p/381299879