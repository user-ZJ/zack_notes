.. _智能指针:

智能指针
================
C++11中引入了智能指针的概念，方便管理堆内存。使用普通指针，容易造成堆内存泄露（忘记释放），二次释放，
程序发生异常时内存泄露等问题等，使用智能指针能更好的管理堆内存。

* 智能指针封装了裸指针，内部还是使用裸指针的调用
* 智能指针使用RAII特点，将对象生命周期使用栈来管理
* 智能指针区分了所有权，因此使用责任清晰


.. warning:: 

    unique_ptr和shared_ptr默认删除器是delete,如果要管理malloc的内存，需要自定义删除器

    | template <typename T>
    | struct FreeDeleter {
    |   void operator()(T \*ptr) const{
    |     free(ptr);
    |   }
    | };
    | std::unique_ptr<void, FreeDeleter<void>> ptr(std::malloc(sizeof(int)));

unique_ptr
---------------------------------

* 默认情况存储成本和裸指针相同，无添加
* 独占所有权，唯一管理对象生命周期
* 不支持拷贝构造，只支持移动(std::move)
* 使用make_unique创建
* 支持 子类指针 与 父类指针 的转化
* 可以转换成shared_ptr
* 支持数组指针unique_ptr<T []>

常用api
```````````````
* uptr.get() :获取原生指针(不能delete)，所有权仍归uptr
* uptr.release() :释放所有权，并返回原生指针（要负责delete）
* uptr.reset() :等价于uptr=nullptr,delete堆对象，同时置空指针
* uptr.reset(p) :先delete uptr,再将所有权指向p指针
* uptr.swap(uptr2) : 交换两个指针指针
* opeartor* :解引用，获取堆上对象的引用
* opeartor-> : 指针访问，可访问对象上的共有函数或数据成员
* opeartor bool :判断指针是否为nullptr

自定义unique_ptr删除操作
```````````````````````````````````
支持以下几种方式：

1. 函数对象
2. 函数指针
3. lambda表达式

.. literalinclude:: code/3_unique_memory.cpp
    :language: cpp


unique_ptr子类和父类转换
```````````````````````````````
1. 子类可以直接给父类赋值
2. 父类转子类：先释放所有权，再强制转换为子类指针，再构建unique_ptr

.. literalinclude:: code/6_unique_cast.cpp
    :language: cpp

转换为shared_ptr
`````````````````````````
.. code-block:: cpp

    std::unique_ptr<int> uptr(new int(42));
    std::shared_ptr<int> sptr(std::move(uptr));



常见陷阱
```````````````````
* 使用unique_ptr获取同一个指针的所有权，会导致双重删除
* 返回unique_ptr(this),会导致抢夺this所有权
* uptr.release()后的指针没有负责删除
* uptr.get()得到的指针，将所有权交给了别的智能指针
* 使用unique_ptr进行多态转型，但忽视了所有权转移
* unique_ptr用在多态转型时，父类必须实现虚析构函数

使用场景
```````````````````
* 为动态分配内存提供异常安全(RAII)
* 从函数内返回动态分配的内存(工程函数)
* 将动态分配内存的所有权转移给函数
* 在对象中保存多态子对象(数据成员)
* 在容器中保存指针

.. code:: cpp

   #include <iostream>
   #include <memory>
   #include <string>
   using namespace std;

   unique_ptr<string> fun2(){
       return unique_ptr<string>(new string("RUS"));
   }

   void fun(){
       unique_ptr<string> pa(new string("CHN"));
       unique_ptr<string> pb(new string("USA"));
       pb = move(pa); //p2=p1;错误，不能直接用等于号;智能指针转移，pa为null，pb为pa指向的内存地址
       if (pa == nullptr)
           cout << "pa现在为空" << endl;
       cout << "*pb " << *pb << endl;//pb变成了“CHA”
       string* ps = pb.release();//清空当前智能指针,并返回指针
       cout << "*ps " << *ps << endl;//ps变成了“CHA”
       pa.reset(ps);//使用指针重置智能指针
       cout << "*pa " << *pa << endl;//pa变成了“CHA”
       pb = fun2();//接收函数的返回值可以用等于号，因为使用了移动构造函数
       cout << "*pb " << *pb << endl;//pb变成了“RUS”
   }
   void main()
   {
       fun();
       system("pause");
   }



shared_ptr
------------------------
* 共享所有权
* 存储成本较裸指针多了引用计数指针(和相关控制块-共享)
* 接口慎用(蔓延问题)
* 线程安全，引用计数增减会减慢多核性能
* 最适合共享的不变数据
* 支持拷贝构造，支持移动
* 支持数组指针 shared_ptr<T []>

-  初始化。智能指针是个模板类，可以指定类型，传入指针通过构造函数初始化。也可以使用make_shared函数初始化。
   不能将指针直接赋值给一个智能指针，一个是类，一个是指针。
-  拷贝和赋值。拷贝使得对象的引用计数增加1，赋值使得原对象引用计数减1，当计数为0时，自动释放内存。后来指向的对象引用计数加1，指向后来的对象。
-  get函数获取原始指针
-  注意不要用一个原始指针初始化多个shared_ptr，否则会造成二次释放同一内存
-  注意避免循环引用，shared_ptr的一个最大的陷阱是循环引用，循环引用会导致堆内存无法正确释放，导致内存泄漏。


shared_ptr(构造函数)和make_shared(原位构造)
```````````````````````````````````````````````````````
* shared_ptr构造函数执行完会有3块相关内存:

1. shared_ptr对象本身内存:包括一个指向对象的指针，一个指向控制块的指针
2. 引用计数控制块:该结构为多个共享对象所有
3. 对象指针指向的原生对象

* shared_ptr构造函数也支持自定义删除器。shared_ptr构造函数为成员模板函数，会自动推导删除器类型，并将删除器对象存储在引用计数控制块内
* make_shared使用的是原位构造，它会将原生对象和引用计数块合并在一块内存里，节省new/delete的调用次数，也缓存友好
* make_shared不支持自定义删除器


自定义shared_ptr删除操作
```````````````````````````````````
支持以下几种方式：

1. 函数对象
2. 函数指针
3. lambda表达式

.. literalinclude:: code/2_share_delete.cpp
    :language: cpp


常用api
```````````````````````
* sptr.get() :获取原生指针(不能delete)，所有权仍归sh_ptr
* sptr.user_count() :获取引用计数值
* sptr.reset() : 使用所有权
* sptr.reset(p) : 先释放sptr引用计数，再将所有权执行p指针
* sptr.swap(sptr2) :交换存储指针与所有权
* sptr.unique() : 判断引用计数是否为一

* opeartor* :解引用，获取堆上对象的引用
* opeartor-> : 指针访问，可访问对象上的共有函数或数据成员
* opeartor bool :判断指针是否为nullptr


shared_ptr转型操作
`````````````````````````
使用shared_ptr进行指针转化是，不能使用传统的转型方式，也不能使用sptr.get()等方式来获取原始指针(因为共享引用计数管理会出错)

shared_ptr转型必须使用系统提供的四大转型函数:

* static_pointer_cast
* dynamic_pointer_cast:要求子父类关系，转型失败返回空指针的shared_ptr
* const_pointer_cast
* reinterpret_pointer_cast




.. code:: cpp

   #include <iostream>
   #include <memory>

   int main() {
       {
           int a = 10;
           std::shared_ptr<int> ptra1(new int(10));
           std::shared_ptr<int> ptra = std::make_shared<int>(a);
           std::shared_ptr<int> ptra2(ptra); //copy
           std::cout << ptra.use_count() << std::endl;
           ptra2 = ptra1; //ptra引用减1，ptra1引用加1

           int b = 20;
           int *pb = &a;
           //std::shared_ptr<int> ptrb = pb;  //error
           std::shared_ptr<int> ptrb = std::make_shared<int>(b);
           ptra2 = ptrb; //assign
           pb = ptrb.get(); //获取原始指针

           std::cout << ptra.use_count() << std::endl;
           std::cout << ptrb.use_count() << std::endl;
       }
   }

weak_ptr
-------------------

weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它不具有普通指针的行为，没有重载operator*和->,
它的最大作用在于协助shared_ptr工作，像旁观者那样观测资源的使用情况。

weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。
但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。使用weak_ptr的成员函数use_count()可以观测资源的引用计数，
另一个成员函数expired()的功能等价于use_count()==0,但更快，表示被观测的资源(也就是shared_ptr的管理的资源)已经不复存在。

weak_ptr可以使用一个非常重要的成员函数lock()从被观测的shared_ptr获得一个可用的shared_ptr对象，
从而操作资源。但当expired()==true的时候，lock()函数将返回一个存储空指针的shared_ptr。

weak_ptr是一种用于解决shared_ptr相互引用时产生死锁问题的智能指针。如果有两个shared_ptr相互引用，
那么这两个shared_ptr指针的引用计数永远不会下降为0，资源永远不会释放。weak_ptr是对对象的一种弱引用，
它不会增加对象的use_count，weak_ptr和shared_ptr可以相互转化，shared_ptr可以直接赋值给weak_ptr，weak_ptr也可以通过调用lock函数来获得shared_ptr。

常用api
`````````````````
* wptr(sptr) :使用shared_ptr构造weak_ptr
* wptr=sptr : 将shared_ptr赋值给weak_ptr
* wptr.user_count() :获取引用计数值
* wptr.reset() :释放所有权
* wptr.expired() :检查被引用对象是否已释放
* wptr.lock() :获取被引用对象的shared_ptr


.. note:: 

    共享指针控制块被weak_ptr引用时，不会释放控制块内存。在这种情况下make_shared性能不好，对象的内存得不到释放

.. code:: cpp

   #include <iostream>
   #include <memory>

   int main() {
       {
           std::shared_ptr<int> sh_ptr = std::make_shared<int>(10);
           std::cout << sh_ptr.use_count() << std::endl;

           std::weak_ptr<int> wp(sh_ptr);
           std::cout << wp.use_count() << std::endl;

           if(!wp.expired()){
               std::shared_ptr<int> sh_ptr2 = wp.lock(); //get another shared_ptr
               *sh_ptr = 100;
               std::cout << wp.use_count() << std::endl;
           }
       }
       //delete memory
   }

**循环引用**

.. code:: cpp

   #include <iostream>
   #include <memory>

   class Child;
   class Parent;

   class Parent {
   private:
       //std::shared_ptr<Child> ChildPtr;
       std::weak_ptr<Child> ChildPtr;
   public:
       void setChild(std::shared_ptr<Child> child) {
           this->ChildPtr = child;
       }

       void doSomething() {
           //new shared_ptr
           if (this->ChildPtr.lock()) {
           }
       }
       ~Parent() {
       }
   };

   class Child {
   private:
       std::shared_ptr<Parent> ParentPtr;
   public:
       void setPartent(std::shared_ptr<Parent> parent) {
           this->ParentPtr = parent;
       }
       void doSomething() {
           if (this->ParentPtr.use_count()) {
           }
       }
       ~Child() {
       }
   };

   int main() {
       std::weak_ptr<Parent> wpp;
       std::weak_ptr<Child> wpc;
       {
           std::shared_ptr<Parent> p(new Parent);
           std::shared_ptr<Child> c(new Child);
           p->setChild(c);
           c->setPartent(p);
           wpp = p;
           wpc = c;
           std::cout << p.use_count() << std::endl; // 2
           std::cout << c.use_count() << std::endl; // 1
       }
       std::cout << wpp.use_count() << std::endl;  // 0
       std::cout << wpc.use_count() << std::endl;  // 0
       return 0;
   }


auto_ptr
-----------------------

auto_ptr这是C++98标准下的智能指针，现在常常已经被C++标准的其他智能指针取代。 
**它的缺点是在转移所有权后会使运行期不安全** （auto_ptr存在拷贝构造函数和赋值构造函数，拷贝后会将原指针置为null）。

体现在两个场景：

1. 使用vector等容器存储auto_ptr,对容器中的数据进行拷贝时，会将容器中的数据置为null，访问的时候会导致段错误。
2. auto_ptr作为函数参数时，会将传入的数据置为null，导致访问时出现段错误。

C++11新标准，用unique_ptr来代替auto_ptr原有功能，unique_ptr禁用了拷贝构造和赋值构造。

1. 不建议在vector中使用unique_ptr
2. 最为参数时，传递unique_ptr引用或裸指针

.. code:: cpp

   #include <iostream>
   #include <memory>
   #include <string>
   using namespace std;

   void main(){
       auto_ptr<string> country[5] =
       {
           auto_ptr<string>(new string("USA")),
           auto_ptr<string>(new string("CHN")),
           auto_ptr<string>(new string("RUS")),
           auto_ptr<string>(new string("FRA")),
           auto_ptr<string>(new string("GRB"))
       };
       auto_ptr<string> pwin;
       pwin = country[2]; //将所有权从country[2]转让给pwin，
                          //此时country[2]不再引用该字符串从而变成空指针，在运行到循环时就会崩溃
       for (int i = 0; i < 5; ++i)
           cout << *country[i] << endl;//运行到[2]时崩溃，因为country[2]为空
       cout << "The best is " << *pwin << endl;
       system("pause");
   }


参考
---------------
https://www.cnblogs.com/wxquare/p/4759020.html

https://www.cnblogs.com/zeppelin5/p/10083597.html