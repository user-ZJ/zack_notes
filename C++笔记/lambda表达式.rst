.. _lambda表达式:

lambda表达式
========================
lambda表达式等价于匿名函数对象，又称 **闭包(closure)**
  

::

   [外部变量访问方式说明符] (参数) mutable noexcept/throw() -> 返回值类型
   {
      函数体;
   };

1. []方括号用于向编译器表明当前是一个 lambda表达式，其不能被省略。在方括号内部，可以注明当前 lambda
   函数的函数体中可以使用哪些“外部变量”。所谓外部变量，指的是和当前lambda 表达式位于同一作用域内的所有局部变量。

   可以传值或者引用：

   [x,&y] 引入x的值和y的引用

   [=,&y] 引入y的引用和其他所有对象，= 为值捕获所有变量


2. (参数)和普通函数的定义一样，lambda匿名函数也可以接收外部传递的多个参数。
   和普通函数不同的是，如果不需要传递参数，可以连同() 小括号一起省略；

3. mutable 此关键字可以省略，如果使用则之前的 ()小括号将不能省略（参数个数可以为0）。
   默认情况下，对于以值传递方式引入的外部变量，不允许在 lambda表达式内部修改它们的值
   （可以理解为这部分变量都是 const 常量）。而如果想修改它们，就必须使用 mutable 关键字。

   注意，对于以值传递方式引入的外部变量，lambda表达式修改的是拷贝的那一份，并不会修改真正的外部变量；

4. noexcept/throw() 可以省略，如果使用，在之前的 ()小括号将不能省略（参数个数可以为 0）。
   默认情况下，lambda函数的函数体中可以抛出任何类型的异常。而标注 noexcept
   关键字，则表示函数体内不会抛出任何异常；使用 throw() 可以指定 lambda函数内部可以抛出的异常类型

5. -> 返回值类型 指明 lambda 匿名函数的返回值类型。值得一提的是，如果
   lambda 函数体内只有一个 return 语句，或者该函数返回
   void，则编译器可以自行推断出返回值类型，此情况下可以直接省略\ ``-> 返回值类型``\ 。

6. 函数体 和普通函数一样，lambda 匿名函数包含的内部代码都放置在函数体中。
   该函数体内除了可以使用指定传递进来的参数之外，还可以使用指定的外部变量以及全局范围内的所有全局变量

捕获列表
-----------------
lambda表达式，从闭包作用域捕获变量而获得状态，分传值和传引用两种。
捕获变量等价于 **函数对象中的示例数据成员**

* [=] 值捕获所有变量
* [&] 引用捕获所有变量
* [&x] 引用捕获x变量
* [x] 值捕获x变量
* [=，&x] 默认通过值捕获，x变量通过引用捕获
* [&,x] 默认通过引用捕获，x变量通过值捕获
* [this] 捕获当前对象，可以访问其所有公有成员，C++20不允许隐式捕获this
* [\*this] 捕获当前对象的深拷贝
* [w=std::move(w2)] 移动捕获，C++14之后支持

.. note:: 

    即使默认要求值捕获，全局变量总是使用引用捕获


:ref:`lambda重载`
-----------------------------