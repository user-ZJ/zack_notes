.. _协程:

协程
=====================
* 协程是C++20新特性
* 协程最早由Melvin Conway 1958年引入。1968年Donald Knuth 提出“协程是子程序的泛化”
* C++20协程是无栈协程，被suspend时，整个协程状态和栈分离，从而可以在另一个调用栈或线程resume
* 主函数和协程可以运行在同一个线程中，也可以运行在多个线程中
* 协程的调度由程序员和编译器协作进行
* 由于不占用操作系统内核资源，不需要操作系统调度，没有系统开销，不需要加锁
* 协程更轻量、吞吐量高、性能高，常用于异步调用、事件驱动的设计
* 协程一般用于IO密集型操作，不用在计算密集型操作

协程和线程区别
-----------------------------
1. 线程是操作系统内核资源，协程不占用系统资源，由程序员和编译器协作进行
2. 主函数和协程可以运行在同一个线程，程序可以只有一个线程但有多个协程
3. 协程是和编程语言密切相关的


协程和普通函数区别
------------------------------------
+-------------+----------------------+------------------------+
|             |       普通函数       |          协程          |
+=============+======================+========================+
| 调用        | 分配栈帧，传递参数   | 分配上下文帧，传递参数 |
+-------------+----------------------+------------------------+
| 返回        | 释放栈帧，返回最终值 | 释放上下文帧           |
+-------------+----------------------+------------------------+
| 挂起suspend | 不支持               | 支持                   |
+-------------+----------------------+------------------------+
| 继续resume  | 不支持               | 支持                   |
+-------------+----------------------+------------------------+


定义协程函数
---------------------------
一个函数是否支持协程由其内部实现决定（而非返回值），如果在函数内部进行了以下操作则支持协程

* co_awiat awaitObj; 挂起点，根据后面参数awaitObj决定挂起协程的行为(可以定制)，将控制返回到调用方
* co_yield data;挂起的同时在挂起点产生中间值，传回给调用方
* co_return  最终返回协程结果，调用结束

协程函数返回值与参数
```````````````````````
* 协程的返回类型 ReturnObject 本质上定义了协程的相关接口类型，不能视作普通的函数返回值
* 协程函数不能定义正常的return语句，编译报错
* 尽量避免在协程中定义引用参数，要谨慎管理参数生命周期

定义协程核心接口
------------------------
* promise_type类型：为编译器提供协程处理流程中的定制行为
* 协程handle：coroutine_handle<promise_type>，调用协程时，编译器创建的对象句柄用于管理协程状态(挂起，继续)

定义协程返回类型
-------------------------
协程函数的返回对象类型ReturnObject,通常要：

1. 定义promise_type类型，并提供至少五大函数(定制点)
2. 定义协程handle的存储位置(通常定义为ReturnObject的数据成员)
3. 提供调用方处理协程状态的函数(如resume,destroy-使用RAII、构造/析构/移动/拷贝等行为)

定义Awaiter
----------------------
co_awiat后的参数，通过三大成员函数来提供协程Suspend时的行为，和协程的Resume行为：

* bool await_ready()挂起是否立即进行。const noexcept
* void await_suspend(auto handle) 处理挂起时定制行为
* void await_resume() 处理继续时定制行为

系统预定义两个常用Awaiter:

* std::suspend_always 永远立即挂起
* std::suspend_never 永远不挂起

协程帧
----------------
* 协程帧保存了协程挂起和恢复的上下文状态信息；编译器会在协程调用时，自动构造协程帧
* 协程帧在C++20中默认分配在堆上，使用自定义new操作符可以更改存储策略
* 编译器不仅构造协程帧，也会向调用方返回一个指向协程帧的handle

协程帧 VS 普通函数栈帧
`````````````````````````````
协程帧包括：

* 参数
* 局部参数
* 构造临时变量
* 挂起点的执行状态(寄存器、指令指针等)
* 返回给调用方的promise值

普通函数的栈帧包括：

* 参数
* 局部变量
* 返回值
* 可能的volatile寄存器存储

协程注意事项
----------------------
* 协程不能有return返回值
* 协程不可以是constexpr或consteval
* 协程不可以有auto或其他模板参数返回值类型
* main函数不能是协程
* 构造器或析构器不能是协程
* 协程可以是静态函数、普通成员函数
* 协程可以是lambda，但不可以捕获外部变量，因为协程继续存在是，lambda捕获的外部对象通常已经销毁