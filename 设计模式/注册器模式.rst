.. _注册器模式:

注册器模式
======================

.. todo::

  * 待补充注册器模式

模式动机
------------------
注册器模式的动机是解耦和简化对象之间的依赖关系，使得对象可以动态地注册和获取，而不需要显式地依赖于其他对象。该模式的主要动机包括：

* 管理全局资源：在某些情况下，系统可能需要一些全局共享的对象或资源，例如日志记录器、数据库连接、配置信息等。使用注册器模式，这些对象可以被注册到一个中央的注册表或注册器中，并在需要时进行获取，避免了传统的全局变量或单例模式的使用。
* 降低耦合度：通过注册器模式，对象可以将自己注册到注册器中，而不需要知道或直接依赖于其他对象的具体实现。这降低了对象之间的耦合度，提高了系统的灵活性和可扩展性。同时，其他对象也可以方便地获取已注册的对象而不需要直接引用它们的类。
* 动态创建和配置对象：注册器模式可以通过动态注册和获取对象，允许对象的创建和配置在运行时进行动态调整。这样，系统可以根据需求动态添加、替换或移除对象，而不需要修改大量的代码。
* 提供集中化管理：通过使用注册器模式，所有相关的对象可以集中化地管理和访问，使得系统更加组织有序，并且容易进行统一的管理和监控。同时，注册器还可以提供额外的功能，如对象生命周期管理、事件广播等。

总而言之，注册器模式的动机是通过解耦和简化对象之间的依赖关系，提供一种动态管理和获取对象的方式，从而提高系统的灵活性、可扩展性和组织性，并且可以对对象进行集中的管理和配置。


模式定义
------------------
注册器模式（Registry Pattern）是一种软件设计模式，它用于管理全局对象的注册和获取。该模式通过使用一个中央注册表或注册器来提供对象的注册和查找功能。

在注册器模式中，对象可以将自己注册到注册器中，并指定一个唯一的名称或其他标识符。注册器将这些对象存储在内部的数据结构中，通常是一个集合（如哈希表或映射）。其他对象可以使用指定的名称从注册器中获取已注册的对象实例。

注册器模式的定义包括以下几个关键角色：

* 注册器（Registry）：注册器是一个中央管理对象注册和获取的组件。它提供了注册对象和获取对象的方法。注册器通常使用某种数据结构（如哈希表或映射）来存储已注册的对象。
* 可注册对象（Registrable）：可注册对象是指实现了注册接口的对象。它们将自己注册到注册器中，并提供一个唯一的名称或标识符作为注册的键。
* 客户端（Client）：客户端是使用注册器的对象。客户端可以通过指定名称或其他标识符从注册器中获取已注册的对象实例。

注册器模式的核心思想是将全局对象的注册和获取逻辑集中到一个独立的组件中，从而简化对象之间的依赖关系，并提供一种动态管理和获取对象的机制。它可以降低耦合度、提高系统的灵活性和可扩展性，同时还允许对象的创建和配置在运行时进行动态调整。

.. note:: 

    注册器一般和工厂模型配合使用

代码分析
-------------------
.. literalinclude:: code/Register/Register.cpp
    :language: cpp

