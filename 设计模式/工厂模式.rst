工厂模式
================

工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为 **简单工厂模式** 和 **工厂方法模式** ，
根据工厂的抽象程度可分为 **工厂方法模式** 和 **抽象工厂模式**。

该模式用于封装和管理对象的创建，是一种创建型模式。





工厂方法模式(Factory Method)
--------------------------------------
工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式。
在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，
这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。

和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂

.. image:: /images/设计模式/FactoryMethod.png



抽象工厂模式(Abstract Factory)
-------------------------------------

抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
抽象工厂模式又称为Kit模式，属于对象创建型模式。

上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品**Phone**（AbstractProduct），如果要生成另一种产品PC，应该怎么表示呢？

抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干

.. image:: /images/设计模式/AbstractFactory.png
