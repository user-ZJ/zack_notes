.. _模板方法模式:

模板方法模式
========================

模式动机
----------------------
在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，
或者由于固有的原因(比如框架与应用之间的关系)而无法和任务的整体结构同时实现

如何在确定稳定操作结构的前提下，来灵活应对各个子步骤变化或者晚期实现需求？

模式定义
----------------------
定义一个操作中的算法骨架(稳定)，而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)
一个算法的结构即可重定义（override重写）该算法的某些特定步骤。

模式分析
-----------------
"不要调用我，让我来调用你"的反向控制结构是Template Method的典型应用。

Template Method调用的虚方法一般推荐将他们设置为protected或private方法(公有接口非虚NVI,Non-Virtual Interface)

代码分析
------------------------

.. literalinclude:: code/Template Method/template2.cpp
    :language: cpp
