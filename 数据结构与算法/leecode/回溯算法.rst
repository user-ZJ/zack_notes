回溯算法
==============

解决一个回溯问题,实际上就是一个决策树的遍历过程。你只需要思考 3 个问题:

1. 路径:也就是已经做出的选择。
2. 选择列表:也就是你当前可以做的选择。
3. 结束条件:也就是到达决策树底层,无法再做选择的条件。

回溯算法的框架:

::

    result = []
    def backtrack(路径, 选择列表):
        if 满足结束条件:
            result.add(路径)
            return
        for 选择 in 选择列表:
            做选择
            backtrack(路径, 选择列表)
            撤销选择


**其核心就是 for 循环里面的递归,在递归调用之前「做选择」,在递归调用之后「撤销选择」**

回溯算法的时间复杂度通常比较高，因为它需要枚举所有可能的解。
在实际应用中，可以通过 **剪枝** 等方法来减少枚举的次数，提高算法效率。

剪枝是回溯算法中常用的优化方法，可以减少不必要的搜索，提高算法效率。
剪枝的具体实现方式因问题而异，但是有一些常用的剪枝技巧可以参考。

* 排序剪枝：对于需要枚举的元素，先进行排序，然后在枚举的过程中，如果发现当前元素与上一个元素相同，
  就跳过。这样可以避免生成重复的解。
* 双向剪枝：在搜索过程中，可以同时从起点和终点开始搜索，如果两个搜索相遇了，就可以停止搜索。这样可以减少搜索的次数。
* 可行性剪枝：在搜索过程中，如果发现当前状态已经不可能得到满足条件的解，就可以停止搜索。这样可以减少不必要的搜索。
* 最优性剪枝：在搜索过程中，如果发现当前状态已经不可能得到更优的解，就可以停止搜索。这样可以减少不必要的搜索。
* 记忆化剪枝：在搜索过程中，可以使用一个哈希表来记录已经搜索过的状态，如果发现当前状态已经搜索过了，
  就可以直接返回结果。这样可以避免重复搜索。
* 约束剪枝：在搜索过程中，可以根据问题的约束条件，对搜索空间进行剪枝。
  例如，在八皇后问题中，可以限制每一行、每一列和每一条对角线上只能有一个皇后，这样可以减少搜索的次数。

以上是常用的剪枝技巧，具体实现方式因问题而异。在实际应用中，可以根据问题的特点，选择合适的剪枝方法。

矩阵中的路径
------------------------
::

    请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
    路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
    如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 
    a b t g
    c f c s
    j d e h
    矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，
    因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。

.. tip:: 

    | 创建一个矩阵记录原矩阵中元素是否被访问
    | 遍历矩阵中的所有原始，每个元素都有可能作为起点
    | 从起点向上下左右四个方向查找
    | 结束条件：匹配到字符串


.. code-block:: cpp

    bool hasPath(string matrix, int rows, int cols, string str) {
            // write code here
            if(matrix.length()==0 || rows<=0 || cols<=0 || str.length()==0)
                return false;
            vector<vector<bool>> visit(rows,vector<bool>(cols));
            for(int i=0;i<rows;i++){
                for(int j=0;j<cols;j++){
                    if(dfs(matrix,i,j,0,rows,cols,str,visit))
                        return true;
                }
            }
            return false;
    }
    // k表示的是查找到字符串word的第几个字符
    bool dfs(const string &matrix,int i,int j,int k,int rows,int cols,
                string &str,vector<vector<bool>> &visit){
            int pos = i*cols+j;
            // 检查边界条件
            if(i<0||i>=rows||j<0||j>=cols||visit[i][j]==true||matrix[pos]!=str[k])
                return false;
            if(k==str.length()-1)
                return true;
            visit[i][j] = true;  // 进入(i,j)位置
            // 沿着当前坐标的上下左右4个方向查找
            if(dfs(matrix,i-1,j,k+1,rows,cols,str,visit)||
            dfs(matrix,i+1,j,k+1,rows,cols,str,visit)||
            dfs(matrix,i,j-1,k+1,rows,cols,str,visit)||
            dfs(matrix,i,j+1,k+1,rows,cols,str,visit))
                return true;
            visit[i][j]=false; // 退出(i,j)位置
            return false;
    }

机器人的运动范围
-----------------------
::

    地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，
    每一次只能向左，右，上，下四个方向移动一格，
    但是不能进入行坐标和列坐标的数位之和大于k的格子。 
    例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。
    但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？

.. tip:: 

    | 结束条件: 越界或坐标的数位之和大于k


.. code-block:: cpp

    int movingCount(int threshold, int rows, int cols) {
            if(threshold<=0)
                return 0;
            vector<vector<int>> mask(rows,vector<int>(cols,-1));
            int res = 0;
            dfs(0,0,threshold,rows,cols,res,mask);
            return res;
    }
    int check(int n){
            int sum=0;
            while(n){
                sum += n%10;
                n/=10;
            }
            return sum;
    }
    void dfs(int x,int y,int threshold,int r,int c,int &res,vector<vector<int>> &mask){
            if(x<0||x>=r||y<0||y>=c||mask[x][y]==1)
                return;
            if(check(x)+check(y)>threshold)
                return;
            mask[x][y] = 1;
            res += 1;
            dfs(x+1,y,threshold,r,c,res,mask);
            dfs(x-1,y,threshold,r,c,res,mask);
            dfs(x,y+1,threshold,r,c,res,mask);
            dfs(x,y-1,threshold,r,c,res,mask);
    }

二叉树中和为某一值的路径
-----------------------------
::

    输入一颗二叉树的根节点root和一个整数expectNumber，找出二叉树中结点值的和为expectNumber的所有路径。
    1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点
    2.叶子节点是指没有子节点的节点
    3.路径只能从父节点到子节点，不能从子节点到父节点
    4.总节点数目为n

.. tip:: 

    | 结束条件：到达叶结点且路径和等于给定的数


.. code-block:: cpp

    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
            vector<vector<int>> result;
            vector<int> path;
            dfs(root,expectNumber,result,path);
            return result;
    }
    void dfs(TreeNode *root, int sum, vector<vector<int>> &result, vector<int> &path){
            if(root == NULL){
                return;
            }
            sum -= root->val;
            path.push_back(root->val);
            //如果是叶子节点，且路劲上节点值的和等于输入的值
            if(sum == 0 && root->left == NULL && root->right == NULL){
                result.push_back(path);
            }
            dfs(root->left,sum, result,path);
            dfs(root->right,sum,result,path);
            path.pop_back();
            sum += root->val;
    }


没有重复项数字的全排列
------------------------------------
::

    给出一组数字(不重复)，返回该组数字的所有排列。结果以字典序升序排列。

.. code-block:: cpp

    class Solution {
      public:
        void recursion(vector<vector<int> >& res, vector<int>& num, int index) {
            //分枝进入结尾，找到一种排列
            if (index == num.size() - 1)
                res.push_back(num);
            else {
                //遍历后续的元素
                for (int i = index; i < num.size(); i++) {
                    //交换二者
                    swap(num[i], num[index]);
                    //继续往后找
                    recursion(res, num, index + 1);
                    //回溯
                    swap(num[i], num[index]);
                }
            }
        }

        vector<vector<int> > permute(vector<int>& num) {
            //先按字典序排序
            sort(num.begin(), num.end());
            vector<vector<int> > res;
            //递归获取
            recursion(res, num, 0);
            return res;
        }
    };

有重复项数字的全排列
-------------------------------
::

    给出一组可能包含重复项的数字，返回该组数字的所有排列。结果以字典序升序排列。

.. code-block:: cpp

    void permute(vector<int>& nums, vector<vector<int>>& res, vector<int>& path, 
                    unordered_set<int>& used) {
        if (path.size() == nums.size()) {
            res.push_back(path);
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (used.count(i) || (i > 0 && nums[i] == nums[i-1] && !used.count(i-1))) continue;
            used.insert(i);
            path.push_back(nums[i]);
            permute(nums, res, path, used);
            path.pop_back();
            used.erase(i);
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> path;
        unordered_set<int> used;
        permute(nums, res, path, used);
        return res;
    }

.. code-block:: cpp

    void permute(vector<int>& nums, vector<vector<int>>& res, int start) {
        if (start == nums.size()) {
            res.push_back(nums);
            return;
        }
        for (int i = start; i < nums.size(); i++) {
            if (i != start && nums[i] == nums[start]) continue; // 去重
            swap(nums[i], nums[start]);
            permute(nums, res, start + 1);
            swap(nums[i], nums[start]);
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end()); // 排序，方便去重
        permute(nums, res, 0);
        return res;
    }


字符串的全排列
-----------------------
::

    输入一个字符串,按字典序打印出该字符串中字符的所有排列。
    例如输入字符串abc,则按字典序打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。

.. tip:: 

    | 思路：递归法，问题转换为先固定第一个字符，求剩余字符的排列；求剩余字符排列时跟原问题一样。
    | 1. 遍历出所有可能出现在第一个位置的字符（即：依次将第一个字符同后面所有字符交换）；
    | 2. 固定第一个字符，求后面字符的排列（即：在第1步的遍历过程中，插入递归进行实现）。

.. code-block:: cpp

    class Solution {
    public:

        vector<string> res;
        
        void subPermutation(string str,int num){
            int n = str.size();
            if(num==n-1){
                res.push_back(str);
            }
            for(int i=num;i<n;i++){
                if(str[num]!=str[i] || num==i){
                    swap(str[num],str[i]);
                    subPermutation(str, num+1);
                }
            }
        }
        
        vector<string> Permutation(string str) {
            subPermutation(str, 0);
            return res;
        }
    };


最早检测序号
---------------------------
::

    有N个待检测物品，编号为1到N，lastCheck[N]数组表示每个物品最晚被检测的序号
    另有一个二维数组表示物品a必须在物品b之前检测；depends[][] = {{1,2},{3,4}....
    注：每次只能检测一个物品，求每个物品最早被检测的需要

    例如：
    输入：
    lastCheck：4 5 2 5 4
    depends: {1,2},{3,2},{5,1},{3,4},{3,1}
    输出：
    3 4 1 2 1

.. tip:: 

    | 使用回溯算法计算所有可能得检测组合，并在过程中根据限制条件进行剪枝
    | 获取所有有效的输出序列，计算每个物品最早检测需要

.. code-block:: cpp

    void permute(const vector<int> &nums, vector<vector<int>> &res, vector<int> &path, 
                unordered_set<int> &used,
                std::vector<int> &last, std::vector<std::pair<int, int>> &limits) {
        if (path.size() == nums.size()) {
            res.push_back(path);
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (used.count(i) || (i > 0 && nums[i] == nums[i - 1] && !used.count(i - 1))) continue;
            // 添加限制条件
            if (last[nums[i] - 1] <= path.size()) continue;
            bool bk = false;
            for (const auto &l : limits) {
            if (nums[i] == l.first and std::find(path.begin(), path.end(), l.second) != path.end()) {
                bk = true;
                break;
            }
            }
            if (bk) continue;
            used.insert(i);
            path.push_back(nums[i]);
            permute(nums, res, path, used,last, limits);
            path.pop_back();
            used.erase(i);
        }
    }

    vector<vector<int>> permute(vector<int> &nums, std::vector<int> &last, 
                                std::vector<std::pair<int, int>> &limits) {
        vector<vector<int>> res;
        vector<int> path;
        unordered_set<int> used;
        permute(nums, res, path, used, last, limits);
        return res;
    }

    int main(int argc, char *argv[]) {
        std::vector<int> last{4, 5, 2, 5, 4};
        std::vector<std::pair<int, int>> limits = {{1, 2}, {3, 2}, {5, 1}, {3, 4}, {3, 1}};
        std::vector<int> p{1, 2, 3, 4, 5};

        // 计算所有可能输出路径
        auto res = permute(p,last,limits);
        std::vector<int> mincheck(p.size(),p.size());
        for (int i = 0; i < res.size(); i++) {
            for(int j=0;j<res[i].size();j++)
            mincheck[res[i][j]-1] = std::min(mincheck[res[i][j]-1],j+1);
        }
        return 0;
    }




