刷题记录
===============

反转链表
----------------
.. code-block:: cpp

    ListNode* ReverseList(ListNode* pHead) {
        ListNode *pre = nullptr;
        ListNode *cur = pHead;
        ListNode *nex = nullptr; // 这里可以指向nullptr，循环里面要重新指向
        while (cur) {
            // 反转next指针
            nex = cur->next;
            cur->next = pre;
            // 更新指针位置
            pre = cur;
            cur = nex;
        }
        return pre;
    }

最大公约数(gcd)
--------------------
.. code-block:: cpp

    long gcd(long m,long n){
        while(n != 0){
            long rem = m % n;
            m = n;
            n = rem;
        }
        return m;
    }





表示数值的字符串
--------------------
请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。
例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。 
但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。

.. tip:: 

    | 数值可以表示为 A[.[B]]e|E[C]或.B[e|EC]
    | 其中A 和C 可以带有正负号，B不能带有符号

.. code-block:: cpp

    bool isNumeric(string str) {
            // write code here
            if(str.length()==0)
                return false;
            int index=0;
            bool numeric = scanInterger(str,index);
            //如果出现'.',则接下来是小数部分
            if(str[index]=='.'){
                ++index;
                //使用或的原因：
                //1. 小数可以没有整数部分；如 .123
                //2. 小数点后可以没有数字；如 233.
                //3. 小数点前后都可以有数字
                numeric = scanUnsignedInteger(str,index) || numeric;
            }
            if(str[index]=='e'||str[index]=='E'){
                ++index;
                //使用&&的原因
                //1. 当e或E前面没有数字时，整个字符串不能表示数字，如 .e1 e1
                //2. 当e或E后面没有整数时，整个字符串不能表示数字，如 12e 12e+5.4
                numeric=numeric&&scanInterger(str,index);
            }
            return numeric && (index==str.size());
    }
    bool scanInterger(string str,int &index){
            if(str[index]=='+'||str[index]=='-')
                ++index;
            return scanUnsignedInteger(str,index);
    }
    bool scanUnsignedInteger(string str,int &index){
            int begin=index;
            while(index<str.length()&&str[index]>='0'&&str[index]<='9')
                ++index;
            return index>begin;
    }


顺时针打印矩阵
--------------------
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 

| 1 2 3 4 
| 5 6 7 8 
| 9 10 11 12 
| 13 14 15 16 
| 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.


.. code-block:: cpp

    vector<int> printMatrix(vector<vector<int> > matrix) {
            vector<int> res;
            if(matrix.empty()) return res;
            int left=0,top=0;
            int right = matrix[0].size()-1,bottom=matrix.size()-1;
            while(left<=right && top<=bottom){
                //上
                for(int i=left;i<=right;i++) res.push_back(matrix[top][i]);
                top ++;
                //右
                for(int i=top;i<=bottom;i++) res.push_back(matrix[i][right]);
                right--;
                //下 只有一行时不用走回来，前面已经走了
                for(int i=right;i>=left&& top-1!=bottom;i--) res.push_back(matrix[bottom][i]);  
                bottom--;
                //左  只有一列时不用走回来，前面已经走了
                for(int i=bottom;i>=top&&left-1!=right;i--) res.push_back(matrix[i][left]);
                left++;   
            }
            return res;
    }


二进制中1的个数
---------------------
输入一个整数，输出该数32位二进制表示中1的个数。其中负数用补码表示。


.. tip:: 

    把一个整数减去1，再和原整数做与运算，会把该整数最右边的1变成0。
    那么一个整数的二进制中有多少个1就可以进行多少次这样的操作


.. code-block:: cpp

    int  NumberOf1(int n) {
            int res = 0;
            while(n){
                res++;
                n = n & (n-1);
            }
            return res;
    }




打印从1到最大的N位数
-------------------------
输入数字n，按照顺序打印出从1到最大的n位十进制数，比如数组3，则打印1 2 3 一直到最大的3位数999

.. tip:: 

    陷阱：当n很大时，需要考虑大数问题，需要使用字符串模型数字加法

.. code-block:: cpp

    void Print1ToMaxOfNDigits(int n){
        if(n<=0)
            return;
        string number(n,'0');
        while(!Increment(number)){
            PrintNumber(number);
        }
    }
    bool Increment(string &number){
        bool isOverflow = false;
        int nTakeOwver = 0;
        int nLength = number.length();
        for(int i=nLength-1;i>=0;i--){
            int nSum = number[i]-'0'+nTakeOver;
            if(i==nLength-1)
                nSum += 1;
            if(nSum >= 10){
                if(i==0)
                    isOverflow = true;
                else{
                    nSum -= 10;
                    nTakeOver = 1;
                    number[i] = '0'+nSum;
                }
            }else{
                number[i] = '0' + nSum;
                break;
            }
        }
        return isOverflow;
    }
    void PrintNumber(string number){
        bool isBegining0 = true;
        int nLength = number.length();
        for(int i=0;i<nLength;i++){
            if(isBegining0&&number[i]!='0')
                isBegining0=false;
            if(!isBegining0)
                cout<<number[i];
        }
        cout<<"\t";
    }

1~n整数中1出现的次数
------------------------------
输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数
例如，1~13中包含1的数字有1、10、11、12、13因此共出现6次

.. tip:: 

    统计某个位置上 1出现的次数。如34，1在十位上出现的次数是10次（10到19），
    1在个位上出现的次数是4次（1，11，21，31），因此34中1出现了14次。
    对于整数n，将这个整数分为三部分：当前位数字cur，更高位数字high，更低位数字low，
    如：对于n=21034，当位数是十位时，cur=3，high=210，low=4。
    我们从个位到最高位 依次计算每个位置出现1的次数：
    在计算时，会出现三种情况
    
    1）当前位的数字等于0时，例如n=21034，在百位上的数字cur=0，百位上是1的情况有：
        00100-00199，01100-01199，……，20100-20199。一共有21*100种情况，即high*100;
    2）当前位的数字等于1时，例如n=21034，在千位上的数字cur=1，千位上是1的情况有：
        01000-01999，11000-11999，21000-21034。一共有2*1000+（34+1）种情况，即high*1000+(low+1)。
    3）当前位的数字大于1时，例如n=21034，在十位上的数字cur=3，十位上是1的情况有：
        00010-00019，……，21010-21019。一共有(210+1)*10种情况，即(high+1)*10。

.. code-block:: cpp

    int NumberOf1Between1AndN_Solution(int n) {
            int count=0;
            for(int i=1;i<=n;i*=10){  //i代表位数
                int high=n/(i*10); //更高位数字
                int low=(n%i);  //更低位数字
                int cur=(n/i)%10;  //当前位数字
                if(cur==0){
                    count+=high*i;
                }else if(cur==1){
                    count+=high*i+(low+1);
                }else{
                    count+=(high+1)*i;
                }
            }
            return count;
    }



翻转单词顺序
---------------
输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。
例如输入字符串“I am a student.”，则输出“student. a am I”。

.. tip:: 

    第一步翻转句子中所有的字符。
    第二步再翻转每个单词中字符的顺序。

.. code-block:: cpp

    string ReverseSentence(string str) {
            if(str.empty())
                return str;
            Reverse(str,0,str.length()-1);  //转句子中所有的字符
            int start=0,end=0;
            while(start < str.length()){
                if(str[start]==' '){
                    start++;
                    end++;
                }else if(end==str.length()||str[end]==' '){
                    Reverse(str, start, end-1);
                    end++;
                    start=end;
                }else{
                    end++;
                }
            }
            return str;
    }
    void Reverse(string &str,int begin,int end){
            while(begin<end){
                swap(str[begin],str[end]);
                begin++;
                end--;
            }
    }


不使用加减乘除做加法
----------------------------
写一个函数，求两个整数之和，要求在函数体内不得使用+、-、\*、/四则运算符号。

.. tip:: 

    计算a和b的无进位和，和进位
    如果进位不为0，则说明a+b的结果等于无进位和+进位，此时，把无进位和作为a，进位作为b，继续计算
    如果进位等于0， 说明此时a+b的结果就等于无进位和，返回无进位和即可。

.. code-block:: cpp

    int Add(int num1, int num2) {
            while (num2 != 0) {
                // 负数左移会在低位补1，所以转化为无符号整数
                int c = ((unsigned int)(num1 & num2)) << 1;
                num1 ^= num2;
                num2 = c;
            }
            return num1;
    }


丑数
----------------
把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 
习惯上我们把1当做是第一个丑数。
求按从小到大的顺序的第N个丑数。

.. code-block:: cpp

    int GetUglyNumber_Solution(int index) {
            if(index <= 0)return 0;
            int p2=0,p3=0,p5=0;//初始化三个指向三个潜在成为最小丑数的位置
            int *result = new int[index];
            result[0] = 1;//
            for(int i=1; i < index; i++){
                result[i] = min(result[p2]*2, min(result[p3]*3, result[p5]*5));
                if(result[i] == result[p2]*2)p2++;//为了防止重复需要三个if都能够走到
                if(result[i] == result[p3]*3)p3++;//为了防止重复需要三个if都能够走到
                if(result[i] == result[p5]*5)p5++;//为了防止重复需要三个if都能够走到
            }
            return result[index-1];
    }


第一个只出现一次的字符
-----------------------------
在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 
如果没有则返回 -1（需要区分大小写）.（从0开始计数）
如输入“abaccdeff”,则输出1

.. tip:: 

    先统计字符出现的次数，在从前往后遍历字符串，找到只出现一次的字符

.. code-block:: cpp

    int FirstNotRepeatingChar(string str) {
            unordered_map<char, int> mp;
            for (const char ch : str) {
                ++mp[ch];
            }    
            for (int i=0; i<str.length(); ++i) {
                if (mp[str[i]] == 1) return i;
            }
            return -1;
    }


字符流中第一个只出现一次的字符
---------------------------------
请实现一个函数用来找出字符流中第一个只出现一次的字符。
例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。
当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。

.. tip:: 

    字符占8个字节，总共有256种情况，创建一个长度为256的数组存放第一个只出现一次的字符index
    数组初始化为-1；从流中读取字符，每读取一个字符index加1，如果该字符只出现一次(即数组中为-1)，
    将数组对应位置设置为index；如果字符不止出现一次，将数组对应位置设置为-2。
    遍历数组，数组中大于0的最小数即为index，对应的字符即为第一次出现一次的字符

.. code-block:: cpp

    #include<vector>

    class Solution
    {
        int index;
        int occurrence[256];
    public:
        Solution():index(0){
            for(int i=0;i<256;i++)
                occurrence[i] = -1;
        }
    //Insert one char from stringstream
        void Insert(char ch) {
            if(occurrence[ch]==-1)
                occurrence[ch] = index;
            else if(occurrence[ch]>=0)
                occurrence[ch] = -2;
            index ++;
        }
    //return the first appearence once char in current stringstream
        char FirstAppearingOnce() {
            char ch = '#';
            int minIndex = numeric_limits<int>::max();
            for(int i=0;i<256;i++){
                if(occurrence[i]>=0 && occurrence[i]<minIndex){
                    ch = (char)i;
                    minIndex = occurrence[i];
                }
            }
            return ch;
        }

    };

数组中只出现一次的两个数字
`````````````````````````````````
::

    一个整型数组里除了两个数字之外，其他数字都出现了两次。
    请写程序找出这两个只出现一次的数字。要求时间复杂度为O(n),空间复杂度是O(1)

.. tip:: 

    | 性质：任何一个数字异或它自己都等于0
    | 思路：把原有数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现两次。每次子数组从头到尾一次异或，那么最终的结果即为要只出现一次的两个数字。
    | 步骤：
    | 1. 从头到尾遍历一次数组中的每个数字，那么最终结果就是两个只出现一次的数字的异或结果，因为其他数字都出现了两次，在异或中全部抵消了
    | 2. 在结果数字中找到第一个为1的位的位置，记为第n位。
    | 3. 以第n位是不是1为标准，把原数组中的数字分为两个子数组，第一个子数组中每个数字的第n位都是1，而第二个数组中每个数字的第n位都是0.（出现了两次的数字肯定被分配到同一个数组，因为两个相同的数字任意一位都是相同的）
    | 4. 对两个数组从头到尾求异或，结果即为两个只出现一次的数字

.. code-block:: cpp

    vector<int> FindNumsAppearOnce(vector<int>& array) {
            // write code here
            vector<int> res;
            if(array.size()<2)
                return res;
            int resultExclusiveOR = 0;
            for(int i=0;i<array.size();i++)
                resultExclusiveOR ^= array[i];
            int t = 1;//找出异或和中哪一位是1
            while((resultExclusiveOR&t)==0)
            {
                t=t<<1;
            }
            int num1=0,num2=0;
            for(int j=0;j<array.size();j++){
                if(t&array[j])
                    num1 ^= array[j];
                else
                    num2 ^= array[j];
            }
            res.push_back(min(num1,num2));
            res.push_back(max(num1,num2));
            return res;
    }


数组中唯一只出现一次的数字
`````````````````````````````````
::

    在一个数组中除了一个数字只出现一次之外，其他数字都出现了三次，请找出那个只出现一次的数字。

.. tip:: 

    把数组中所有数字的二进制表示的每一位都加起来，如果某一位的和能被3整除，
    那么那个只出现一次的数字二进制表示中对应的那一位为0，否则为1

.. code-block:: cpp

    int foundOnceNumber(vector<int>& arr) {
            // write code here
            int bitSum[32] = {0};
            for(int i=0;i<arr.size();i++){
                int bitMask = 1;
                for(int j=31;j>=0;j--){
                    int bit = arr[i]&bitMask;
                    if(bit!=0)
                        bitSum[j]+=1;
                    bitMask=bitMask<<1;
                }
            }
            int result = 0;
            for(int i=0;i<32;i++){
                result = result <<1;
                result += bitSum[i]%3;
            }
            return result;
    }


中文数字转阿拉伯数字
--------------------------------
::

    给定一个中文数字字符串，返回阿拉伯表示的字符串
    如：三点五->3.5  三百零二->302
    如果不是有效的表示返回原字符串

.. tip:: 

    | 定义数字和单位表
    | 数字包括（1,2,3,4,5,6,7,8,9）
    | 单位分为高级单位(十百千)和低级单位(万，亿)，高级单位可以和低级单位组合
    | 从后往前遍历，遇到的是1到9的数字，就乘以前一位的单位，

.. code-block:: cpp

    static std::unordered_map<wchar_t, int> chinese_num = {
     {L'一', 1}, {L'二', 2}, {L'三', 3}, {L'四', 4}, {L'五', 5}, 
     {L'六', 6}, {L'七', 7}, {L'八', 8}, {L'九', 9}};
    static std::unordered_map<wchar_t, int> high_units = {{L'万', 10000}, {L'亿', 100000000}};
    static std::unordered_map<wchar_t, int> low_units = {{L'十', 10}, {L'百', 100}, {L'千', 1000}};

    int Chinese2Digits::chineseToNum(const std::wstring &s) {
        int res = 0; //最终结果
        int num = 0; // 不同单位对应的值
        int high_unit = 1,low_unit=1; // 单位
        for (int i = s.size()-1; i >=0 ; i--) {
            auto c = s[i];
            if (high_units.count(c)) { 
                high_unit = high_units[c];
                low_unit = 1;
                num = 0;
            } else if(low_units.count(c)){
                low_unit = low_units[c];
                if(i==0)
                    num = low_unit*high_unit;  //处理以十开头的，如十二
                else
                    num = 0;
            }else if(chinese_num.count(c)){
                num += chinese_num[c]*high_unit*low_unit;
            }else{
                num = 0;
            }
                res += num;
        }
        return res;
    }

H 指数
-----------------
leetcode: https://leetcode.cn/problems/h-index/description/?envType=study-plan-v2&envId=top-interview-150

给你一个整数数组 citations ，其中 citations[i] 表示研究者的第 i 篇论文被引用的次数。计算并返回该研究者的 h 指数。

h 指数的定义：h 代表“高引用次数” ，一名科研人员的 h 指数 是指他（她）至少发表了 h 篇论文，并且 至少 有 h 篇论文被引用次数大于等于 h 。
如果 h 有多种可能的值，h 指数 是其中最大的那个。

.. tip:: 

    计数排序:

    新建并维护一个数组 counter用来记录当前引用次数的论文有几篇。
    根据定义，我们可以发现 H 指数不可能大于总的论文发表数，所以对于引用次数超过论文发表数的情况，我们可以将其按照总的论文发表数来计算即可。

    最后我们可以从后向前遍历数组 counter，对于每个 0≤i≤n0，在数组 counter 中得到大于或等于当前引用次数i的总论文数。当我们找到一个 H指数时跳出循环，并返回结果。

.. literalinclude:: code/H指数.cpp
    :language: cpp


除自身以外数组的乘积
---------------------------
leetcode: https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&envId=top-interview-150

给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。

题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。

请 不要使用除法，且在 O(n) 时间复杂度内完成此题。

.. tip::

    | 1. 初始化两个空数组 L 和 R。对于给定索引 i，L[i] 代表的是 i 左侧所有数字的乘积，R[i] 代表的是 i 右侧所有数字的乘积。
    | 2. 我们需要用两个循环来填充 L 和 R 数组的值。对于数组 L，L[0] 应该是 1，因为第一个元素的左边没有元素。对于其他元素：L[i] = L[i-1] * nums[i-1]。
    | 3. 同理，对于数组 R，R[length-1] 应为 1。length 指的是输入数组的大小。其他元素：R[i] = R[i+1] * nums[i+1]。
    | 4. 当 R 和 L 数组填充完成，我们只需要在输入数组上迭代，且索引 i 处的值为：L[i] * R[i]。

.. literalinclude:: code/除自身以外数组的乘积.cpp
    :language: cpp



