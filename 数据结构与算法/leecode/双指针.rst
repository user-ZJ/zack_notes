双指针问题
=======================

调整数组顺序使奇数位于偶数前面
-------------------------------------------
输入一个整数数组，实现一个函数来调整该数组中数字的顺序，
使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分。

.. tip:: 

    使用两个指针A，B，A从前往后找偶数，B从后往前找奇数，然后交换数据

.. code-block:: cpp

    vector<int> reOrderArray(vector<int>& array) {
            // write code here
            int i=0,j=array.size()-1;
            while(i<j){
                while(i<j&&(array[i]%2!=0))  //找第一个偶数
                    i++;
                while(i<j&&(array[j]%2==0))  //找第一个奇数
                    j--;
                if(i<j)
                    swap(array[i], array[j]);
            }
            return array;
    }


链表中倒数第K个节点
---------------------------
输入一个链表，输出该链表中倒数第k个结点。
如果该链表长度小于k，请返回空。

.. tip:: 

    使用两个指针遍历链表，使得两个指针距离为k，
    当一个指针到达链表末尾，另一个指针即为倒数第k个节点的位置

.. code-block:: cpp

    ListNode* FindKthToTail(ListNode* pHead, int k) {
            // write code here
            if(pHead==nullptr || k<=0)
                return nullptr;
            ListNode *p1 = pHead;
            ListNode *p2=nullptr;
            for(int i=0;i<k-1;i++){  //注意此处为k-1
                if(p1->next==nullptr)
                    return nullptr;
                else
                    p1 = p1->next;
            }
            p2 = pHead;
            while(p1->next!=nullptr){
                p2 = p2->next;
                p1 = p1->next;
            }
            return p2;
    }


链表中环的入口节点
---------------------------------
给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。

.. tip:: 

    | 使用快慢指针，快指针每次后移两个节点，慢指针每次后移一个节点
    | 从相遇处到入口结点的距离与头结点与入口结点的距离相同

.. code-block:: cpp

    ListNode *detectCycle(ListNode *head) {
            ListNode *fast = head;
            ListNode *slow = head;
            while(fast!=nullptr && fast->next!=nullptr){
                fast = fast->next->next;
                slow = slow->next;
                if(fast==slow){
                    // 重新指向链表头部
                    ListNode *slow2 = head;
                    // 与第一次相遇的结点相同速度出发，相遇结点为入口结点
                    while(slow != slow2){
                        slow = slow->next;
                        slow2 = slow2->next;
                    }
                    return slow;
                }
            }
            return nullptr;
    }


最长不包含重复字符的子字符串
---------------------------------------
请从字符串中找出一格最长的不包含重复字符的子字符串，计算该最长子字符串的长度。

.. tip:: 

    | 使用一个map记录子字符串中字符出现次数，
    | 使用两个指针标记子字符串的起始和结束位置，
    | 记录两个指针的最大距离

.. code-block:: cpp

    int maxLength(vector<char>& arr) {
            unordered_map<char,int> mmap;
            int maxlen=0;
            int i=0,j=0;
            while(j<arr.size()){
                if(mmap[arr[j]]==0){
                    mmap[arr[j]]=1;
                    maxlen = max(maxlen,j-i+1);
                    j++;
                }else{
                    mmap[arr[i]] =0;
                    i++;
                }
            }
            return maxlen;
    }


两个链表的第一个公共节点
----------------------------------
输入两个无环的单链表，找出它们的第一个公共结点。

.. image:: /images/list1.png

.. tip:: 

    将两个链表长度拼接，则两个链表的长度均为a+b,使用双指针，则第一个相同的节点即为相交节点

.. code-block:: cpp

    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
            ListNode* p1=pHead1;
            ListNode* p2=pHead2;
            int len1=0;
            int len2=0;
            while(p1)
            {
                len1++;
                p1=p1->next;
            }
            while(p2)
            {
                len2++;
                p2=p2->next;
            }
            int num=0;
            if(len1>len2)
            {
                num=len1-len2;
                while(num!=0)
                {
                    pHead1=pHead1->next;
                    num--;
                }
            }else{
                num=len2-len1;
                while(num!=0)
                {
                    pHead2=pHead2->next;
                    num--;
                }
            }
            while(pHead1)
            {
                if(pHead1==pHead2)
                    return pHead1;
                    
                pHead1=pHead1->next;
                pHead2=pHead2->next;
            }
            return nullptr;
    }


和为s的两个数字
------------------------
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。


.. tip:: 

    因为数组是有序的，所以可以用双指针，指向数组的首尾，具体步骤如下：

    1. 初始化：指针i指向数组首， 指针j指向数组尾部
    2. 如果arr[i] + arr[j] == sum , 说明是可能解
    3. 否则如果arr[i] + arr[j] > sum, 说明和太大，所以--j
    4. 否则如果arr[i] + arr[j] < sum, 说明和太小，所以++i


.. code-block:: cpp

    vector<int> FindNumbersWithSum(vector<int> array,int sum) {
            if (array.empty()) return vector<int>();
            int tmp = INT_MAX;
            pair<int, int> ret;
            int i = 0, j = array.size();
            while (i < j) {
                if (array[i] + array[j-1] == sum) {
                    if (array[i]*array[j-1] < tmp) {
                        tmp = array[i] * array[j-1];
                        ret = {i, j-1};
                    }
                    ++i, --j;
                }
                else if (array[i] + array[j-1] < sum) {
                    ++i;
                }
                else {
                    --j;
                }
            }
            if (ret.first == ret.second) return vector<int>();
            return vector<int>({array[ret.first], array[ret.second]});
    }

两数之和
------------------------
leetcode: https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/?envType=study-plan-v2&envId=top-interview-150

给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列  ，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1 <= index1 < index2 <= numbers.length 。

以长度为 2 的整数数组 [index1, index2] 的形式返回这两个整数的下标 index1 和 index2。

你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。

你所设计的解决方案必须只使用常量级的额外空间。

.. literalinclude:: ./code/两数之和.cpp
    :language: cpp


三数之和
----------------------------------
leetcode: https://leetcode.cn/problems/3sum/description/?envType=study-plan-v2&envId=top-interview-150

给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请你返回所有和为 0 且不重复的三元组。

注意：答案中不可以包含重复的三元组。

.. tip::

    | 排序 + 双指针

.. literalinclude:: ./code/三数之和.cpp
    :language: cpp


和为s的连续正数序列
---------------------------------------
输入一个正数s，打印出所有和为s的连续正数序列（至少含有两个数）。
例如，输入15，由于1+2+3+4+5 = 4+5+6 = 7+8 = 15，所以打印出3个连续序列。


.. tip:: 

    | 用两个数small和big分别表示序列的最小值和最大值，首先把small初始化为1，big初始化为2，
    | 如果从small到big的序列的和大于s，则可以从序列中去掉较小的值，也就是增大small的值。
    | 如果从small到big的序列的和小于s，则可以增大big，让这个序列包含更多的数字。
    | 因为这个序列至少要包含两个数字，则一直增加small到(1+s)/2为止。


.. code-block:: cpp

    vector<vector<int> > FindContinuousSequence(int sum) {
            vector<vector<int>> ret;
            if(sum<3)
                return ret;
            int l = 1, r = 2;
            int curSum = l+r;
            int middle = (1+sum) / 2;
            while (l < middle) {
                if(curSum==sum){
                    vector<int> ans;
                    for (int k=l; k<=r; ++k)
                        ans.push_back(k);
                    ret.push_back(ans);
                }
                while(curSum>sum&&l<middle){
                    curSum -= l;
                    l++;
                    if(curSum==sum){
                        vector<int> ans;
                        for (int k=l; k<=r; ++k)
                            ans.push_back(k);
                        ret.push_back(ans);
                    }
                }
                r++;
                curSum+=r;
            }
            return ret;
    }

合并两个有序数组
----------------------------
leetcode: https://leetcode.cn/problems/merge-sorted-array/?envType=study-plan-v2&envId=top-interview-150

给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。

.. attention::

    注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

.. tip::

    逆向双指针法：观察可知，nums1的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 nums1的最后面。

.. literalinclude:: ./code/合并两个有序数组.cpp
    :language: cpp

移除元素
------------------------
leetcode: https://leetcode.cn/problems/remove-element/?envType=study-plan-v2&envId=top-interview-150

给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

.. tip::

    使用双指针，两个指针初始时分别位于数组的首尾，向中间移动遍历该序列

.. literalinclude:: ./code/移除元素.cpp
    :language: cpp

删除有序数组中的重复项
------------------------------------
leetcode: https://leetcode.cn/problems/remove-duplicates-from-sorted-array/?envType=study-plan-v2&envId=top-interview-150

给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。

考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：

更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。
返回 k 。

.. tip::

    | 使用快慢指针。
    | 如果数组 nums的长度为 0，则数组不包含任何元素，因此返回 0。
    | 当数组 nums的长度大于 0时，数组中至少包含一个元素，在删除重复元素之后也至少剩下一个元素，因此 nums[0] 保持原状即可，从下标 1开始删除重复元素。
    | 定义两个指针 fast和 slow分别为快指针和慢指针，快指针表示遍历数组到达的下标位置，慢指针表示下一个不同元素要填入的下标位置，初始时两个指针都指向下标 1。
    | 假设数组 nums的长度为 n。将快指针 fast依次遍历从 1到 n-1的每个位置，对于每个位置，如果 nums[fast]!=nums[fast-1]，
    | 说明 nums[fast]和之前的元素都不同，因此将 nums[fast]的值复制到 nums[slow]，然后将 slow的值加 1，即指向下一个位置。
    | 遍历结束之后，从 nums[0]到 nums[slow-1]的每个元素都不相同且包含原数组中的每个不同的元素，因此新的长度即为 slow，返回 slow即可。

.. literalinclude:: ./code/删除有序数组中的重复项.cpp
    :language: cpp

删除有序数组中的重复项2
----------------------------------
leetcode: https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/?envType=study-plan-v2&envId=top-interview-150

给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

.. tip::

    | 因为给定数组是有序的，所以相同元素必然连续。我们可以使用双指针解决本题，遍历数组检查每一个元素是否应该被保留，如果应该被保留，就将其移动到指定位置。 
    | 具体地，我们定义两个指针 slow和 fast分别为慢指针和快指针，其中慢指针表示处理出的数组的长度，快指针表示已经检查过的数组的长度， 
    | 即 nums[fast]表示待检查的第一个元素，nums[slow-1]为上一个应该被保留的元素所移动到的指定位置。
    | 因为本题要求相同元素最多出现两次而非一次，所以我们需要检查上上个应该被保留的元素 nums[slow-2]是否和当前待检查元素 nums[fast]相同。
    | 当且仅当 nums[slow-2]=nums[fast]时，当前待检查元素 nums[fast]不应该被保留  
    | （因为此时必然有 nums[slow−2]=nums[slow−1]=nums[fast]）。最后，slow即为处理好的数组的长度。
    | 特别地，数组的前两个数必然可以被保留，因此对于长度不超过 2 的数组，我们无需进行任何处理，对于长度超过 2 的数组，我们直接将双指针的初始值设为 2 即可。

.. literalinclude:: ./code/删除有序数组中的重复项2.cpp
    :language: cpp

删除有序数组中的重复项N
----------------------------------
leetcode: https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/?envType=study-plan-v2&envId=top-interview-150

给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过k次的元素只出现k次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

.. tip::

    | 由于是保留 k 个相同数字，对于前 k 个数字，我们可以直接保留
    | 对于后面的任意数字，能够保留的前提是：与当前写入的位置前面的第 k 个元素进行比较，不相同则保留

.. literalinclude:: ./code/删除有序数组中的重复项N.cpp
    :language: cpp


接雨水
----------------------------------
leetcode: https://leetcode.cn/problems/trapping-rain-water/description/?envType=study-plan-v2&envId=top-interview-150

给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

.. tip::

    | 维护两个指针 left 和 right，以及两个变量 leftMax 和 rightMax，初始时 left=0,right=n−1,leftMax=0,rightMax=0。指针 left 只会向右移动，指针 right 只会向左移动，在移动指针的过程中维护两个变量 leftMax 和 rightMax 的值。
    | 当两个指针没有相遇时，进行如下操作：
    | 使用 height[left] 和 height[right] 的值更新 leftMax 和 rightMax 的值；
    | 如果 height[left]<height[right]，则必有 leftMax<rightMax，下标 left 处能接的雨水量等于 leftMax−height[left]，将下标 left 处能接的雨水量加到能接的雨水总量，然后将 left 加 1（即向右移动一位）；
    | 如果 height[left]≥height[right]，则必有 leftMax≥rightMax，下标 right 处能接的雨水量等于 rightMax−height[right]，将下标 right 处能接的雨水量加到能接的雨水总量，然后将 right 减 1（即向左移动一位）。
    | 当两个指针相遇时，即可得到能接的雨水总量。



.. literalinclude:: ./code/接雨水.cpp
    :language: cpp


判断子序列
----------------------------------
leetcode: https://leetcode.cn/problems/is-subsequence/description/?envType=study-plan-v2&envId=top-interview-150

给定字符串 s 和 t ，判断 s 是否为 t 的子序列。

字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。

.. tip::

    | 我们初始化两个指针 i 和 j，分别指向 s 和 t 的初始位置。每次贪心地匹配，匹配成功则 i 和 j 同时右移，
    | 匹配 s 的下一个位置，匹配失败则 j 右移，i 不变，尝试用 t 的下一个字符匹配 s。
    | 最终如果 i 移动到 s 的末尾，就说明 s 是 t 的子序列。

.. literalinclude:: ./code/判断子序列.cpp
    :language: cpp



盛最多水的容器
----------------------------------
leetcode: https://leetcode.cn/problems/container-with-most-water/description/?envType=study-plan-v2&envId=top-interview-150

给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。

找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

返回容器可以储存的最大水量。

说明：你不能倾斜容器。

.. literalinclude:: ./code/盛最多水的容器.cpp
    :language: cpp



