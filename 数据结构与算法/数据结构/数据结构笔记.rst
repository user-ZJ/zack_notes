数据结构笔记
=======================

数据结构可视化网站

https://www.cs.usfca.edu/~galles/visualization/Algorithms.html


优先队列(堆)
-----------------------
对于优先队列的实现，我们使用 **二叉堆(binary heap)**。
如果堆这个词不加修饰的用在优先队列上下文中，一般都是指二叉堆的实现。  

结构性质
```````````````

堆是一棵完全二叉树，底层元素从左到有填入。

完全二叉树可以用一个数组表示，而不需要使用链

.. image:: /images/数据结构/heap1.jpg

对于数组中任一位置i上的元素，其左儿子在位置2i上，右儿子在(2i+1)位置上，它的父节点在i/2(向下取整)位置上。

因此，这里不仅不需要链，而且遍历该树所需要的操作也极简单，大部分的计算机上都运行得非常快。
这种实现方法唯一的问题在于，最大的堆大小需要事先估计，但一般情况下并不成问题(如果需要可以重新调整)

因此，一个堆数据结构将由一个(Comparable对象的)数组和一个代表当前堆的大小的整数组成。

堆序性质
```````````````````
在堆中，对于每一个节点X，X的父亲中的键小于等于X中的键，根节点除外(它没有父亲)。这样可以在常数时间执行findMin

insert
```````````````
为将一个元素X插入到堆中，我们在下一个空闲位置创建一个空穴。如果X可以放在空穴而不破坏堆序性质，那么插入完成。
否则，把空穴的父节点的元素移入空穴，这样空穴就朝着根的方向上行一步。继续该过程直到X能被放入空穴为止。

这种策略叫做 **上滤（percolate up）**:新元素在堆中上滤直到找到正确的位置。

插入的最坏情况时间为O(logN)

.. image:: /images/数据结构/heap2.jpg

deleteMin
```````````````````
deleteMin类似于插入的方式处理。找出最小元素是容易的(根元素最小)，困难的是删除它。
当删除最小元时，在根节点建立一个空穴。由于现在堆少了一个元素，因此堆中最后一个元素X必须移动到该堆的某个地方。
如果X可以被放入到空穴中，那么deleteMin完成。
不过这一般不太可能，因此我们将空穴的两个儿子中较小者移入空穴，这样空穴向下推了一层。重复该步骤，直到X可以被放入到空穴中。
因此我们的作法是将X置于沿着根开始包含最小儿子的一条路径上的一个正确位置。这种策略叫做 **下虑(percolate down)** 。

算法实现时需要注意节点只有一个儿子的情况。

.. image:: /images/数据结构/heap3.jpg

.. code-block:: cpp

    template <typename Comparable>
    class BinaryHeap {
      public:
        explicit BinaryHeap(int capacity = 100);
        explicit BinaryHeap(const std::vector<Comparable> &items);
        bool isEmpty() const {
            return currentSize == 0;
        }
        const Comparable &findMin() const {
            return array[currentSize];
        }
        void insert(const Comparable &x);
        void deleteMin();
        // 最小值保存到minItem，并删除最小值
        void deleteMin(Comparable &minItem);
        void makeEmpty() {
            currentSize = 0;
        }

    private:
        int currentSize;
        std::vector<Comparable> array;
        void buildHeap();
        void percolateDown(int hole);
    };

    template <typename Comparable>
    BinaryHeap<Comparable>::BinaryHeap(int capacity) {
        currentSize = 0;
        array.resize(capacity);
    }

    template <typename Comparable>
    BinaryHeap<Comparable>::BinaryHeap(const std::vector<Comparable> &items) {
        currentSize = items.size();
        array.resize(items.size()+100);
        for(auto &cmp:items){
            array[++currentSize] = cmp;
        }
        buildHeap();
    }

    template <typename Comparable>
    void BinaryHeap<Comparable>::insert(const Comparable &x) {
        if (currentSize == array.size() - 1) array.resize(array.size() * 2);
        // percolate up
        int hole = ++currentSize;
        for (; hole > 1 && x < array[hole / 2]; hole /= 2) {
            array[hole] = array[hole / 2];
        }
        array[hole] = x;
    }

    template <typename Comparable>
    void BinaryHeap<Comparable>::deleteMin() {
        if (isEmpty()) return;
        array[1] = array(currentSize--);
        percolateDown(1);
    }

    template <typename Comparable>
    void BinaryHeap<Comparable>::deleteMin(Comparable &minItem) {
        if (isEmpty()) return;
        minItem = array[1];
        array[1] = array(currentSize--);
        percolateDown(1);
    }

    template <typename Comparable>
    void BinaryHeap<Comparable>::percolateDown(int hole) {
        int child;
        Comparable tmp = array[hole];
        for (; hole * 2 < currentSize; hole = child) {
            child = hole * 2;
            if (child != currentSize && array[child] > array[child + 1]) { child++; }
            if (array[child] < tmp) {
            array[hole] = array[child];
            } else {
            break;
            }
        }
        array[hole] = tmp;
    }

    template <typename Comparable>
    void BinaryHeap<Comparable>::buildHeap(){
        for(int i=currentSize/2;i>=1;i--)
            percolateDown(i);
    }
